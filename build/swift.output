Terminals which are not used

   DO
   SELF
   ERROR


State 26 conflicts: 1 shift/reduce
State 33 conflicts: 1 shift/reduce
State 42 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce
State 51 conflicts: 2 shift/reduce
State 109 conflicts: 1 shift/reduce
State 139 conflicts: 1 shift/reduce
State 142 conflicts: 1 shift/reduce
State 156 conflicts: 1 shift/reduce
State 164 conflicts: 1 shift/reduce
State 175 conflicts: 1 shift/reduce
State 185 conflicts: 1 shift/reduce
State 191 conflicts: 1 shift/reduce
State 192 conflicts: 1 shift/reduce


Grammar

    0 $accept: root $end

    1 end_expr: ENDL
    2         | ';' opt_endl

    3 opt_endl: /* empty */
    4         | ENDL

    5 root: stmt_list

    6 stmt_import: IMPORT var

    7 stmt_block: '{' stmt_list '}' opt_endl

    8 stmt_list: /* empty */
    9          | stmt_list stmt opt_endl

   10 stmt: stmt_block
   11     | stmt_if
   12     | stmt_while
   13     | stmt_for
   14     | stmt_repeat
   15     | stmt_switch
   16     | BREAK end_expr
   17     | RETURN end_expr
   18     | RETURN expr end_expr
   19     | expr end_expr
   20     | var '=' expr end_expr
   21     | func_decl_named
   22     | end_expr
   23     | var_list '=' args

   24 stmt_if: IF expr opt_endl stmt_block elseif_list opt_endl
   25        | IF expr opt_endl stmt_block elseif_list ELSE stmt_block opt_endl

   26 elseif_list: /* empty */
   27            | elseif_list ELSEIF expr stmt_block

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases opt_endl '}'

   29 switch_cases: /* empty */
   30             | switch_cases switch_case

   31 switch_case: case_label stmt_list
   32            | default_label stmt_list

   33 case_label: CASE expr ':'

   34 default_label: DEFAULT ':'

   35 stmt_while: WHILE expr stmt_block

   36 stmt_for: FOR alone_id IN expr stmt_block

   37 stmt_repeat: REPEAT stmt_block WHILE expr

   38 alone_id: ID

   39 id_chain: alone_id
   40         | id_chain '.' alone_id

   41 varlet: VAR
   42       | LET

   43 var: id_chain
   44    | varlet id_chain
   45    | '[' type ']' '(' ')'
   46    | var ':' '[' type ']'
   47    | var ':' type

   48 var_list: var
   49         | var_list ',' var

   50 expr: var
   51     | INT
   52     | DOUBLE
   53     | STRING
   54     | TRUE
   55     | FALSE
   56     | BOOL
   57     | FLOAT
   58     | NIL
   59     | NOT expr
   60     | expr NOT
   61     | expr AND expr
   62     | expr OR expr
   63     | expr '+' expr
   64     | expr '-' expr
   65     | expr '*' expr
   66     | expr '/' expr
   67     | expr '%' expr
   68     | expr '>' expr
   69     | expr '<' expr
   70     | expr GE expr
   71     | expr LE expr
   72     | expr EQ expr
   73     | expr NE expr
   74     | expr RANGE expr
   75     | '(' expr ')'
   76     | func_call
   77     | array_constructor
   78     | stmt_import

   79 func_call: var '(' arg_list ')'
   80          | var ':' alone_id '(' arg_list ')'

   81 arg_list: /* empty */
   82         | args

   83 args: id_chain
   84     | ID ':' expr
   85     | args ',' ID ':' expr

   86 type: INTT
   87     | STRINGT
   88     | FLOATT
   89     | DOUBLET
   90     | BOOLT
   91     | CHARACTERT

   92 func_decl_named: FUNCTION id_chain func_body

   93 func_body: '(' arg_list_decl ')' FUNCTIONARROW type stmt_block

   94 arg_list_decl: /* empty */
   95              | args_decl

   96 args_decl: id_chain ':' type
   97          | args_decl ',' alone_id ':' type

   98 array_constructor: '[' array_elem_list ']'

   99 array_elem_list: /* empty */
  100                | array_elems

  101 array_elems: array_elem
  102            | array_elems ',' array_elem

  103 array_elem: expr


Terminals, with rules where they appear

$end (0) 0
'%' (37) 67
'(' (40) 45 75 79 80 93
')' (41) 45 75 79 80 93
'*' (42) 65
'+' (43) 63
',' (44) 49 85 97 102
'-' (45) 64
'.' (46) 40
'/' (47) 66
':' (58) 33 34 46 47 80 84 85 96 97
';' (59) 2
'<' (60) 69
'=' (61) 20 23
'>' (62) 68
'[' (91) 45 46 98
']' (93) 45 46 98
'{' (123) 7 28
'}' (125) 7 28
error (256)
IMPORT (258) 6
INT (259) 51
FLOAT (260) 57
DOUBLE (261) 52
BOOL (262) 56
STRING (263) 53
STRINGT (264) 87
CHARACTERT (265) 91
INTT (266) 86
FLOATT (267) 88
DOUBLET (268) 89
BOOLT (269) 90
TRUE (270) 54
FALSE (271) 55
LET (272) 42
VAR (273) 41
REPEAT (274) 37
WHILE (275) 35 37
FOR (276) 36
IN (277) 36
IF (278) 24 25
ELSE (279) 25
ELSEIF (280) 27
SWITCH (281) 28
CASE (282) 33
DEFAULT (283) 34
BREAK (284) 16
FUNCTION (285) 92
FUNCTIONARROW (286) 93
DO (287)
RANGE (288) 74
RETURN (289) 17 18
NIL (290) 58
SELF (291)
ERROR (292)
ID (293) 38 84 85
EQ (294) 72
NE (295) 73
LE (296) 71
GE (297) 70
NOT (298) 59 60
ENDL (299) 1 4
OR (300) 62
AND (301) 61


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
end_expr (66)
    on left: 1 2, on right: 16 17 18 19 20 22
opt_endl (67)
    on left: 3 4, on right: 2 7 9 24 25 28
root (68)
    on left: 5, on right: 0
stmt_import (69)
    on left: 6, on right: 78
stmt_block (70)
    on left: 7, on right: 10 24 25 27 35 36 37 93
stmt_list (71)
    on left: 8 9, on right: 5 7 9 31 32
stmt (72)
    on left: 10 11 12 13 14 15 16 17 18 19 20 21 22 23,
    on right: 9
stmt_if (73)
    on left: 24 25, on right: 11
elseif_list (74)
    on left: 26 27, on right: 24 25 27
stmt_switch (75)
    on left: 28, on right: 15
switch_cases (76)
    on left: 29 30, on right: 28 30
switch_case (77)
    on left: 31 32, on right: 30
case_label (78)
    on left: 33, on right: 31
default_label (79)
    on left: 34, on right: 32
stmt_while (80)
    on left: 35, on right: 12
stmt_for (81)
    on left: 36, on right: 13
stmt_repeat (82)
    on left: 37, on right: 14
alone_id (83)
    on left: 38, on right: 36 39 40 80 97
id_chain (84)
    on left: 39 40, on right: 40 43 44 83 92 96
varlet (85)
    on left: 41 42, on right: 44
var (86)
    on left: 43 44 45 46 47, on right: 6 20 46 47 48 49 50 79 80
var_list (87)
    on left: 48 49, on right: 23 49
expr (88)
    on left: 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
    68 69 70 71 72 73 74 75 76 77 78, on right: 18 19 20 24 25 27 28
    33 35 36 37 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
    84 85 103
func_call (89)
    on left: 79 80, on right: 76
arg_list (90)
    on left: 81 82, on right: 79 80
args (91)
    on left: 83 84 85, on right: 23 82 85
type (92)
    on left: 86 87 88 89 90 91, on right: 45 46 47 93 96 97
func_decl_named (93)
    on left: 92, on right: 21
func_body (94)
    on left: 93, on right: 92
arg_list_decl (95)
    on left: 94 95, on right: 93
args_decl (96)
    on left: 96 97, on right: 95 97
array_constructor (97)
    on left: 98, on right: 77
array_elem_list (98)
    on left: 99 100, on right: 98
array_elems (99)
    on left: 101 102, on right: 100 102
array_elem (100)
    on left: 103, on right: 101 102


state 0

    0 $accept: . root $end

    $default  reduce using rule 8 (stmt_list)

    root       go to state 1
    stmt_list  go to state 2


state 1

    0 $accept: root . $end

    $end  shift, and go to state 3


state 2

    5 root: stmt_list .
    9 stmt_list: stmt_list . stmt opt_endl

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    ';'       shift, and go to state 26
    '{'       shift, and go to state 27
    '['       shift, and go to state 28
    '('       shift, and go to state 29

    $default  reduce using rule 5 (root)

    end_expr           go to state 30
    stmt_import        go to state 31
    stmt_block         go to state 32
    stmt               go to state 33
    stmt_if            go to state 34
    stmt_switch        go to state 35
    stmt_while         go to state 36
    stmt_for           go to state 37
    stmt_repeat        go to state 38
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 42
    var_list           go to state 43
    expr               go to state 44
    func_call          go to state 45
    func_decl_named    go to state 46
    array_constructor  go to state 47


state 3

    0 $accept: root $end .

    $default  accept


state 4

    6 stmt_import: IMPORT . var

    LET  shift, and go to state 12
    VAR  shift, and go to state 13
    ID   shift, and go to state 23
    '['  shift, and go to state 48

    alone_id  go to state 39
    id_chain  go to state 40
    varlet    go to state 41
    var       go to state 49


state 5

   51 expr: INT .

    $default  reduce using rule 51 (expr)


state 6

   57 expr: FLOAT .

    $default  reduce using rule 57 (expr)


state 7

   52 expr: DOUBLE .

    $default  reduce using rule 52 (expr)


state 8

   56 expr: BOOL .

    $default  reduce using rule 56 (expr)


state 9

   53 expr: STRING .

    $default  reduce using rule 53 (expr)


state 10

   54 expr: TRUE .

    $default  reduce using rule 54 (expr)


state 11

   55 expr: FALSE .

    $default  reduce using rule 55 (expr)


state 12

   42 varlet: LET .

    $default  reduce using rule 42 (varlet)


state 13

   41 varlet: VAR .

    $default  reduce using rule 41 (varlet)


state 14

   37 stmt_repeat: REPEAT . stmt_block WHILE expr

    '{'  shift, and go to state 27

    stmt_block  go to state 50


state 15

   35 stmt_while: WHILE . expr stmt_block

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 52
    func_call          go to state 45
    array_constructor  go to state 47


state 16

   36 stmt_for: FOR . alone_id IN expr stmt_block

    ID  shift, and go to state 23

    alone_id  go to state 53


state 17

   24 stmt_if: IF . expr opt_endl stmt_block elseif_list opt_endl
   25        | IF . expr opt_endl stmt_block elseif_list ELSE stmt_block opt_endl

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 54
    func_call          go to state 45
    array_constructor  go to state 47


state 18

   28 stmt_switch: SWITCH . expr opt_endl '{' opt_endl switch_cases opt_endl '}'

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 55
    func_call          go to state 45
    array_constructor  go to state 47


state 19

   16 stmt: BREAK . end_expr

    ENDL  shift, and go to state 25
    ';'   shift, and go to state 26

    end_expr  go to state 56


state 20

   92 func_decl_named: FUNCTION . id_chain func_body

    ID  shift, and go to state 23

    alone_id  go to state 39
    id_chain  go to state 57


state 21

   17 stmt: RETURN . end_expr
   18     | RETURN . expr end_expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    ENDL    shift, and go to state 25
    ';'     shift, and go to state 26
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    end_expr           go to state 58
    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 59
    func_call          go to state 45
    array_constructor  go to state 47


state 22

   58 expr: NIL .

    $default  reduce using rule 58 (expr)


state 23

   38 alone_id: ID .

    $default  reduce using rule 38 (alone_id)


state 24

   59 expr: NOT . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 60
    func_call          go to state 45
    array_constructor  go to state 47


state 25

    1 end_expr: ENDL .

    $default  reduce using rule 1 (end_expr)


state 26

    2 end_expr: ';' . opt_endl

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 62


state 27

    7 stmt_block: '{' . stmt_list '}' opt_endl

    $default  reduce using rule 8 (stmt_list)

    stmt_list  go to state 63


state 28

   45 var: '[' . type ']' '(' ')'
   98 array_constructor: '[' . array_elem_list ']'

    IMPORT      shift, and go to state 4
    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    STRINGT     shift, and go to state 64
    CHARACTERT  shift, and go to state 65
    INTT        shift, and go to state 66
    FLOATT      shift, and go to state 67
    DOUBLET     shift, and go to state 68
    BOOLT       shift, and go to state 69
    TRUE        shift, and go to state 10
    FALSE       shift, and go to state 11
    LET         shift, and go to state 12
    VAR         shift, and go to state 13
    NIL         shift, and go to state 22
    ID          shift, and go to state 23
    NOT         shift, and go to state 24
    '['         shift, and go to state 28
    '('         shift, and go to state 29

    $default  reduce using rule 99 (array_elem_list)

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 70
    func_call          go to state 45
    type               go to state 71
    array_constructor  go to state 47
    array_elem_list    go to state 72
    array_elems        go to state 73
    array_elem         go to state 74


state 29

   75 expr: '(' . expr ')'

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 75
    func_call          go to state 45
    array_constructor  go to state 47


state 30

   22 stmt: end_expr .

    $default  reduce using rule 22 (stmt)


state 31

   78 expr: stmt_import .

    $default  reduce using rule 78 (expr)


state 32

   10 stmt: stmt_block .

    $default  reduce using rule 10 (stmt)


state 33

    9 stmt_list: stmt_list stmt . opt_endl

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 76


state 34

   11 stmt: stmt_if .

    $default  reduce using rule 11 (stmt)


state 35

   15 stmt: stmt_switch .

    $default  reduce using rule 15 (stmt)


state 36

   12 stmt: stmt_while .

    $default  reduce using rule 12 (stmt)


state 37

   13 stmt: stmt_for .

    $default  reduce using rule 13 (stmt)


state 38

   14 stmt: stmt_repeat .

    $default  reduce using rule 14 (stmt)


state 39

   39 id_chain: alone_id .

    $default  reduce using rule 39 (id_chain)


state 40

   40 id_chain: id_chain . '.' alone_id
   43 var: id_chain .

    '.'  shift, and go to state 77

    $default  reduce using rule 43 (var)


state 41

   44 var: varlet . id_chain

    ID  shift, and go to state 23

    alone_id  go to state 39
    id_chain  go to state 78


state 42

   20 stmt: var . '=' expr end_expr
   46 var: var . ':' '[' type ']'
   47    | var . ':' type
   48 var_list: var .
   50 expr: var .
   79 func_call: var . '(' arg_list ')'
   80          | var . ':' alone_id '(' arg_list ')'

    '='  shift, and go to state 79
    ':'  shift, and go to state 80
    '('  shift, and go to state 81

    '='       [reduce using rule 48 (var_list)]
    ','       reduce using rule 48 (var_list)
    $default  reduce using rule 50 (expr)


state 43

   23 stmt: var_list . '=' args
   49 var_list: var_list . ',' var

    '='  shift, and go to state 82
    ','  shift, and go to state 83


state 44

   19 stmt: expr . end_expr
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    ENDL   shift, and go to state 25
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98
    ';'    shift, and go to state 26

    end_expr  go to state 99


state 45

   76 expr: func_call .

    $default  reduce using rule 76 (expr)


state 46

   21 stmt: func_decl_named .

    $default  reduce using rule 21 (stmt)


state 47

   77 expr: array_constructor .

    $default  reduce using rule 77 (expr)


state 48

   45 var: '[' . type ']' '(' ')'

    STRINGT     shift, and go to state 64
    CHARACTERT  shift, and go to state 65
    INTT        shift, and go to state 66
    FLOATT      shift, and go to state 67
    DOUBLET     shift, and go to state 68
    BOOLT       shift, and go to state 69

    type  go to state 71


state 49

    6 stmt_import: IMPORT var .
   46 var: var . ':' '[' type ']'
   47    | var . ':' type

    ':'  shift, and go to state 100

    ':'       [reduce using rule 6 (stmt_import)]
    $default  reduce using rule 6 (stmt_import)


state 50

   37 stmt_repeat: REPEAT stmt_block . WHILE expr

    WHILE  shift, and go to state 101


state 51

   46 var: var . ':' '[' type ']'
   47    | var . ':' type
   50 expr: var .
   79 func_call: var . '(' arg_list ')'
   80          | var . ':' alone_id '(' arg_list ')'

    ':'  shift, and go to state 80
    '('  shift, and go to state 81

    ':'       [reduce using rule 50 (expr)]
    '('       [reduce using rule 50 (expr)]
    $default  reduce using rule 50 (expr)


state 52

   35 stmt_while: WHILE expr . stmt_block
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98
    '{'    shift, and go to state 27

    stmt_block  go to state 102


state 53

   36 stmt_for: FOR alone_id . IN expr stmt_block

    IN  shift, and go to state 103


state 54

   24 stmt_if: IF expr . opt_endl stmt_block elseif_list opt_endl
   25        | IF expr . opt_endl stmt_block elseif_list ELSE stmt_block opt_endl
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    ENDL   shift, and go to state 61
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98

    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 104


state 55

   28 stmt_switch: SWITCH expr . opt_endl '{' opt_endl switch_cases opt_endl '}'
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    ENDL   shift, and go to state 61
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98

    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 105


state 56

   16 stmt: BREAK end_expr .

    $default  reduce using rule 16 (stmt)


state 57

   40 id_chain: id_chain . '.' alone_id
   92 func_decl_named: FUNCTION id_chain . func_body

    '.'  shift, and go to state 77
    '('  shift, and go to state 106

    func_body  go to state 107


state 58

   17 stmt: RETURN end_expr .

    $default  reduce using rule 17 (stmt)


state 59

   18 stmt: RETURN expr . end_expr
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    ENDL   shift, and go to state 25
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98
    ';'    shift, and go to state 26

    end_expr  go to state 108


state 60

   59 expr: NOT expr .
   60     | expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    $default  reduce using rule 59 (expr)


state 61

    4 opt_endl: ENDL .

    $default  reduce using rule 4 (opt_endl)


state 62

    2 end_expr: ';' opt_endl .

    $default  reduce using rule 2 (end_expr)


state 63

    7 stmt_block: '{' stmt_list . '}' opt_endl
    9 stmt_list: stmt_list . stmt opt_endl

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    ';'       shift, and go to state 26
    '{'       shift, and go to state 27
    '}'       shift, and go to state 109
    '['       shift, and go to state 28
    '('       shift, and go to state 29

    end_expr           go to state 30
    stmt_import        go to state 31
    stmt_block         go to state 32
    stmt               go to state 33
    stmt_if            go to state 34
    stmt_switch        go to state 35
    stmt_while         go to state 36
    stmt_for           go to state 37
    stmt_repeat        go to state 38
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 42
    var_list           go to state 43
    expr               go to state 44
    func_call          go to state 45
    func_decl_named    go to state 46
    array_constructor  go to state 47


state 64

   87 type: STRINGT .

    $default  reduce using rule 87 (type)


state 65

   91 type: CHARACTERT .

    $default  reduce using rule 91 (type)


state 66

   86 type: INTT .

    $default  reduce using rule 86 (type)


state 67

   88 type: FLOATT .

    $default  reduce using rule 88 (type)


state 68

   89 type: DOUBLET .

    $default  reduce using rule 89 (type)


state 69

   90 type: BOOLT .

    $default  reduce using rule 90 (type)


state 70

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr
  103 array_elem: expr .

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98

    $default  reduce using rule 103 (array_elem)


state 71

   45 var: '[' type . ']' '(' ')'

    ']'  shift, and go to state 110


state 72

   98 array_constructor: '[' array_elem_list . ']'

    ']'  shift, and go to state 111


state 73

  100 array_elem_list: array_elems .
  102 array_elems: array_elems . ',' array_elem

    ','  shift, and go to state 112

    $default  reduce using rule 100 (array_elem_list)


state 74

  101 array_elems: array_elem .

    $default  reduce using rule 101 (array_elems)


state 75

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr
   75     | '(' expr . ')'

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98
    ')'    shift, and go to state 113


state 76

    9 stmt_list: stmt_list stmt opt_endl .

    $default  reduce using rule 9 (stmt_list)


state 77

   40 id_chain: id_chain '.' . alone_id

    ID  shift, and go to state 23

    alone_id  go to state 114


state 78

   40 id_chain: id_chain . '.' alone_id
   44 var: varlet id_chain .

    '.'  shift, and go to state 77

    $default  reduce using rule 44 (var)


state 79

   20 stmt: var '=' . expr end_expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 115
    func_call          go to state 45
    array_constructor  go to state 47


state 80

   46 var: var ':' . '[' type ']'
   47    | var ':' . type
   80 func_call: var ':' . alone_id '(' arg_list ')'

    STRINGT     shift, and go to state 64
    CHARACTERT  shift, and go to state 65
    INTT        shift, and go to state 66
    FLOATT      shift, and go to state 67
    DOUBLET     shift, and go to state 68
    BOOLT       shift, and go to state 69
    ID          shift, and go to state 23
    '['         shift, and go to state 116

    alone_id  go to state 117
    type      go to state 118


state 81

   79 func_call: var '(' . arg_list ')'

    ID  shift, and go to state 119

    $default  reduce using rule 81 (arg_list)

    alone_id  go to state 39
    id_chain  go to state 120
    arg_list  go to state 121
    args      go to state 122


state 82

   23 stmt: var_list '=' . args

    ID  shift, and go to state 119

    alone_id  go to state 39
    id_chain  go to state 120
    args      go to state 123


state 83

   49 var_list: var_list ',' . var

    LET  shift, and go to state 12
    VAR  shift, and go to state 13
    ID   shift, and go to state 23
    '['  shift, and go to state 48

    alone_id  go to state 39
    id_chain  go to state 40
    varlet    go to state 41
    var       go to state 124


state 84

   74 expr: expr RANGE . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 125
    func_call          go to state 45
    array_constructor  go to state 47


state 85

   72 expr: expr EQ . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 126
    func_call          go to state 45
    array_constructor  go to state 47


state 86

   73 expr: expr NE . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 127
    func_call          go to state 45
    array_constructor  go to state 47


state 87

   71 expr: expr LE . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 128
    func_call          go to state 45
    array_constructor  go to state 47


state 88

   70 expr: expr GE . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 129
    func_call          go to state 45
    array_constructor  go to state 47


state 89

   60 expr: expr NOT .

    $default  reduce using rule 60 (expr)


state 90

   62 expr: expr OR . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 130
    func_call          go to state 45
    array_constructor  go to state 47


state 91

   61 expr: expr AND . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 131
    func_call          go to state 45
    array_constructor  go to state 47


state 92

   69 expr: expr '<' . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 132
    func_call          go to state 45
    array_constructor  go to state 47


state 93

   68 expr: expr '>' . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 133
    func_call          go to state 45
    array_constructor  go to state 47


state 94

   63 expr: expr '+' . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 134
    func_call          go to state 45
    array_constructor  go to state 47


state 95

   64 expr: expr '-' . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 135
    func_call          go to state 45
    array_constructor  go to state 47


state 96

   65 expr: expr '*' . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 136
    func_call          go to state 45
    array_constructor  go to state 47


state 97

   66 expr: expr '/' . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 137
    func_call          go to state 45
    array_constructor  go to state 47


state 98

   67 expr: expr '%' . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 138
    func_call          go to state 45
    array_constructor  go to state 47


state 99

   19 stmt: expr end_expr .

    $default  reduce using rule 19 (stmt)


state 100

   46 var: var ':' . '[' type ']'
   47    | var ':' . type

    STRINGT     shift, and go to state 64
    CHARACTERT  shift, and go to state 65
    INTT        shift, and go to state 66
    FLOATT      shift, and go to state 67
    DOUBLET     shift, and go to state 68
    BOOLT       shift, and go to state 69
    '['         shift, and go to state 116

    type  go to state 118


state 101

   37 stmt_repeat: REPEAT stmt_block WHILE . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 139
    func_call          go to state 45
    array_constructor  go to state 47


state 102

   35 stmt_while: WHILE expr stmt_block .

    $default  reduce using rule 35 (stmt_while)


state 103

   36 stmt_for: FOR alone_id IN . expr stmt_block

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 140
    func_call          go to state 45
    array_constructor  go to state 47


state 104

   24 stmt_if: IF expr opt_endl . stmt_block elseif_list opt_endl
   25        | IF expr opt_endl . stmt_block elseif_list ELSE stmt_block opt_endl

    '{'  shift, and go to state 27

    stmt_block  go to state 141


state 105

   28 stmt_switch: SWITCH expr opt_endl . '{' opt_endl switch_cases opt_endl '}'

    '{'  shift, and go to state 142


state 106

   93 func_body: '(' . arg_list_decl ')' FUNCTIONARROW type stmt_block

    ID  shift, and go to state 23

    $default  reduce using rule 94 (arg_list_decl)

    alone_id       go to state 39
    id_chain       go to state 143
    arg_list_decl  go to state 144
    args_decl      go to state 145


state 107

   92 func_decl_named: FUNCTION id_chain func_body .

    $default  reduce using rule 92 (func_decl_named)


state 108

   18 stmt: RETURN expr end_expr .

    $default  reduce using rule 18 (stmt)


state 109

    7 stmt_block: '{' stmt_list '}' . opt_endl

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 146


state 110

   45 var: '[' type ']' . '(' ')'

    '('  shift, and go to state 147


state 111

   98 array_constructor: '[' array_elem_list ']' .

    $default  reduce using rule 98 (array_constructor)


state 112

  102 array_elems: array_elems ',' . array_elem

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 70
    func_call          go to state 45
    array_constructor  go to state 47
    array_elem         go to state 148


state 113

   75 expr: '(' expr ')' .

    $default  reduce using rule 75 (expr)


state 114

   40 id_chain: id_chain '.' alone_id .

    $default  reduce using rule 40 (id_chain)


state 115

   20 stmt: var '=' expr . end_expr
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    ENDL   shift, and go to state 25
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98
    ';'    shift, and go to state 26

    end_expr  go to state 149


state 116

   46 var: var ':' '[' . type ']'

    STRINGT     shift, and go to state 64
    CHARACTERT  shift, and go to state 65
    INTT        shift, and go to state 66
    FLOATT      shift, and go to state 67
    DOUBLET     shift, and go to state 68
    BOOLT       shift, and go to state 69

    type  go to state 150


state 117

   80 func_call: var ':' alone_id . '(' arg_list ')'

    '('  shift, and go to state 151


state 118

   47 var: var ':' type .

    $default  reduce using rule 47 (var)


state 119

   38 alone_id: ID .
   84 args: ID . ':' expr

    ':'  shift, and go to state 152

    $default  reduce using rule 38 (alone_id)


state 120

   40 id_chain: id_chain . '.' alone_id
   83 args: id_chain .

    '.'  shift, and go to state 77

    $default  reduce using rule 83 (args)


state 121

   79 func_call: var '(' arg_list . ')'

    ')'  shift, and go to state 153


state 122

   82 arg_list: args .
   85 args: args . ',' ID ':' expr

    ','  shift, and go to state 154

    $default  reduce using rule 82 (arg_list)


state 123

   23 stmt: var_list '=' args .
   85 args: args . ',' ID ':' expr

    ','  shift, and go to state 154

    $default  reduce using rule 23 (stmt)


state 124

   46 var: var . ':' '[' type ']'
   47    | var . ':' type
   49 var_list: var_list ',' var .

    ':'  shift, and go to state 100

    $default  reduce using rule 49 (var_list)


state 125

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr
   74     | expr RANGE expr .

    NOT  shift, and go to state 89
    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98

    $default  reduce using rule 74 (expr)


state 126

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   72     | expr EQ expr .
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89
    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98

    $default  reduce using rule 72 (expr)


state 127

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   73     | expr NE expr .
   74     | expr . RANGE expr

    NOT  shift, and go to state 89
    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98

    $default  reduce using rule 73 (expr)


state 128

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   71     | expr LE expr .
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89
    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98

    $default  reduce using rule 71 (expr)


state 129

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   70     | expr GE expr .
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89
    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98

    $default  reduce using rule 70 (expr)


state 130

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   62     | expr OR expr .
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98

    $default  reduce using rule 62 (expr)


state 131

   60 expr: expr . NOT
   61     | expr . AND expr
   61     | expr AND expr .
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98

    $default  reduce using rule 61 (expr)


state 132

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   69     | expr '<' expr .
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89
    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98

    $default  reduce using rule 69 (expr)


state 133

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   68     | expr '>' expr .
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89
    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98

    $default  reduce using rule 68 (expr)


state 134

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   63     | expr '+' expr .
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98

    $default  reduce using rule 63 (expr)


state 135

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   64     | expr '-' expr .
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98

    $default  reduce using rule 64 (expr)


state 136

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   65     | expr '*' expr .
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89

    $default  reduce using rule 65 (expr)


state 137

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   66     | expr '/' expr .
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89

    $default  reduce using rule 66 (expr)


state 138

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   67     | expr '%' expr .
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    NOT  shift, and go to state 89

    $default  reduce using rule 67 (expr)


state 139

   37 stmt_repeat: REPEAT stmt_block WHILE expr .
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98

    NOT       [reduce using rule 37 (stmt_repeat)]
    $default  reduce using rule 37 (stmt_repeat)


state 140

   36 stmt_for: FOR alone_id IN expr . stmt_block
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98
    '{'    shift, and go to state 27

    stmt_block  go to state 155


state 141

   24 stmt_if: IF expr opt_endl stmt_block . elseif_list opt_endl
   25        | IF expr opt_endl stmt_block . elseif_list ELSE stmt_block opt_endl

    $default  reduce using rule 26 (elseif_list)

    elseif_list  go to state 156


state 142

   28 stmt_switch: SWITCH expr opt_endl '{' . opt_endl switch_cases opt_endl '}'

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 157


state 143

   40 id_chain: id_chain . '.' alone_id
   96 args_decl: id_chain . ':' type

    ':'  shift, and go to state 158
    '.'  shift, and go to state 77


state 144

   93 func_body: '(' arg_list_decl . ')' FUNCTIONARROW type stmt_block

    ')'  shift, and go to state 159


state 145

   95 arg_list_decl: args_decl .
   97 args_decl: args_decl . ',' alone_id ':' type

    ','  shift, and go to state 160

    $default  reduce using rule 95 (arg_list_decl)


state 146

    7 stmt_block: '{' stmt_list '}' opt_endl .

    $default  reduce using rule 7 (stmt_block)


state 147

   45 var: '[' type ']' '(' . ')'

    ')'  shift, and go to state 161


state 148

  102 array_elems: array_elems ',' array_elem .

    $default  reduce using rule 102 (array_elems)


state 149

   20 stmt: var '=' expr end_expr .

    $default  reduce using rule 20 (stmt)


state 150

   46 var: var ':' '[' type . ']'

    ']'  shift, and go to state 162


state 151

   80 func_call: var ':' alone_id '(' . arg_list ')'

    ID  shift, and go to state 119

    $default  reduce using rule 81 (arg_list)

    alone_id  go to state 39
    id_chain  go to state 120
    arg_list  go to state 163
    args      go to state 122


state 152

   84 args: ID ':' . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 164
    func_call          go to state 45
    array_constructor  go to state 47


state 153

   79 func_call: var '(' arg_list ')' .

    $default  reduce using rule 79 (func_call)


state 154

   85 args: args ',' . ID ':' expr

    ID  shift, and go to state 165


state 155

   36 stmt_for: FOR alone_id IN expr stmt_block .

    $default  reduce using rule 36 (stmt_for)


state 156

   24 stmt_if: IF expr opt_endl stmt_block elseif_list . opt_endl
   25        | IF expr opt_endl stmt_block elseif_list . ELSE stmt_block opt_endl
   27 elseif_list: elseif_list . ELSEIF expr stmt_block

    ELSE    shift, and go to state 166
    ELSEIF  shift, and go to state 167
    ENDL    shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 168


state 157

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl . switch_cases opt_endl '}'

    $default  reduce using rule 29 (switch_cases)

    switch_cases  go to state 169


state 158

   96 args_decl: id_chain ':' . type

    STRINGT     shift, and go to state 64
    CHARACTERT  shift, and go to state 65
    INTT        shift, and go to state 66
    FLOATT      shift, and go to state 67
    DOUBLET     shift, and go to state 68
    BOOLT       shift, and go to state 69

    type  go to state 170


state 159

   93 func_body: '(' arg_list_decl ')' . FUNCTIONARROW type stmt_block

    FUNCTIONARROW  shift, and go to state 171


state 160

   97 args_decl: args_decl ',' . alone_id ':' type

    ID  shift, and go to state 23

    alone_id  go to state 172


state 161

   45 var: '[' type ']' '(' ')' .

    $default  reduce using rule 45 (var)


state 162

   46 var: var ':' '[' type ']' .

    $default  reduce using rule 46 (var)


state 163

   80 func_call: var ':' alone_id '(' arg_list . ')'

    ')'  shift, and go to state 173


state 164

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr
   84 args: ID ':' expr .

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98

    NOT       [reduce using rule 84 (args)]
    $default  reduce using rule 84 (args)


state 165

   85 args: args ',' ID . ':' expr

    ':'  shift, and go to state 174


state 166

   25 stmt_if: IF expr opt_endl stmt_block elseif_list ELSE . stmt_block opt_endl

    '{'  shift, and go to state 27

    stmt_block  go to state 175


state 167

   27 elseif_list: elseif_list ELSEIF . expr stmt_block

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 176
    func_call          go to state 45
    array_constructor  go to state 47


state 168

   24 stmt_if: IF expr opt_endl stmt_block elseif_list opt_endl .

    $default  reduce using rule 24 (stmt_if)


state 169

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases . opt_endl '}'
   30 switch_cases: switch_cases . switch_case

    CASE     shift, and go to state 177
    DEFAULT  shift, and go to state 178
    ENDL     shift, and go to state 61

    $default  reduce using rule 3 (opt_endl)

    opt_endl       go to state 179
    switch_case    go to state 180
    case_label     go to state 181
    default_label  go to state 182


state 170

   96 args_decl: id_chain ':' type .

    $default  reduce using rule 96 (args_decl)


state 171

   93 func_body: '(' arg_list_decl ')' FUNCTIONARROW . type stmt_block

    STRINGT     shift, and go to state 64
    CHARACTERT  shift, and go to state 65
    INTT        shift, and go to state 66
    FLOATT      shift, and go to state 67
    DOUBLET     shift, and go to state 68
    BOOLT       shift, and go to state 69

    type  go to state 183


state 172

   97 args_decl: args_decl ',' alone_id . ':' type

    ':'  shift, and go to state 184


state 173

   80 func_call: var ':' alone_id '(' arg_list ')' .

    $default  reduce using rule 80 (func_call)


state 174

   85 args: args ',' ID ':' . expr

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 185
    func_call          go to state 45
    array_constructor  go to state 47


state 175

   25 stmt_if: IF expr opt_endl stmt_block elseif_list ELSE stmt_block . opt_endl

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 186


state 176

   27 elseif_list: elseif_list ELSEIF expr . stmt_block
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98
    '{'    shift, and go to state 27

    stmt_block  go to state 187


state 177

   33 case_label: CASE . expr ':'

    IMPORT  shift, and go to state 4
    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    stmt_import        go to state 31
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 51
    expr               go to state 188
    func_call          go to state 45
    array_constructor  go to state 47


state 178

   34 default_label: DEFAULT . ':'

    ':'  shift, and go to state 189


state 179

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases opt_endl . '}'

    '}'  shift, and go to state 190


state 180

   30 switch_cases: switch_cases switch_case .

    $default  reduce using rule 30 (switch_cases)


state 181

   31 switch_case: case_label . stmt_list

    $default  reduce using rule 8 (stmt_list)

    stmt_list  go to state 191


state 182

   32 switch_case: default_label . stmt_list

    $default  reduce using rule 8 (stmt_list)

    stmt_list  go to state 192


state 183

   93 func_body: '(' arg_list_decl ')' FUNCTIONARROW type . stmt_block

    '{'  shift, and go to state 27

    stmt_block  go to state 193


state 184

   97 args_decl: args_decl ',' alone_id ':' . type

    STRINGT     shift, and go to state 64
    CHARACTERT  shift, and go to state 65
    INTT        shift, and go to state 66
    FLOATT      shift, and go to state 67
    DOUBLET     shift, and go to state 68
    BOOLT       shift, and go to state 69

    type  go to state 194


state 185

   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr
   85 args: args ',' ID ':' expr .

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98

    NOT       [reduce using rule 85 (args)]
    $default  reduce using rule 85 (args)


state 186

   25 stmt_if: IF expr opt_endl stmt_block elseif_list ELSE stmt_block opt_endl .

    $default  reduce using rule 25 (stmt_if)


state 187

   27 elseif_list: elseif_list ELSEIF expr stmt_block .

    $default  reduce using rule 27 (elseif_list)


state 188

   33 case_label: CASE expr . ':'
   60 expr: expr . NOT
   61     | expr . AND expr
   62     | expr . OR expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . '>' expr
   69     | expr . '<' expr
   70     | expr . GE expr
   71     | expr . LE expr
   72     | expr . EQ expr
   73     | expr . NE expr
   74     | expr . RANGE expr

    RANGE  shift, and go to state 84
    EQ     shift, and go to state 85
    NE     shift, and go to state 86
    LE     shift, and go to state 87
    GE     shift, and go to state 88
    NOT    shift, and go to state 89
    OR     shift, and go to state 90
    AND    shift, and go to state 91
    '<'    shift, and go to state 92
    '>'    shift, and go to state 93
    '+'    shift, and go to state 94
    '-'    shift, and go to state 95
    '*'    shift, and go to state 96
    '/'    shift, and go to state 97
    '%'    shift, and go to state 98
    ':'    shift, and go to state 195


state 189

   34 default_label: DEFAULT ':' .

    $default  reduce using rule 34 (default_label)


state 190

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases opt_endl '}' .

    $default  reduce using rule 28 (stmt_switch)


state 191

    9 stmt_list: stmt_list . stmt opt_endl
   31 switch_case: case_label stmt_list .

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    ';'       shift, and go to state 26
    '{'       shift, and go to state 27
    '['       shift, and go to state 28
    '('       shift, and go to state 29

    ENDL      [reduce using rule 31 (switch_case)]
    $default  reduce using rule 31 (switch_case)

    end_expr           go to state 30
    stmt_import        go to state 31
    stmt_block         go to state 32
    stmt               go to state 33
    stmt_if            go to state 34
    stmt_switch        go to state 35
    stmt_while         go to state 36
    stmt_for           go to state 37
    stmt_repeat        go to state 38
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 42
    var_list           go to state 43
    expr               go to state 44
    func_call          go to state 45
    func_decl_named    go to state 46
    array_constructor  go to state 47


state 192

    9 stmt_list: stmt_list . stmt opt_endl
   32 switch_case: default_label stmt_list .

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    ';'       shift, and go to state 26
    '{'       shift, and go to state 27
    '['       shift, and go to state 28
    '('       shift, and go to state 29

    ENDL      [reduce using rule 32 (switch_case)]
    $default  reduce using rule 32 (switch_case)

    end_expr           go to state 30
    stmt_import        go to state 31
    stmt_block         go to state 32
    stmt               go to state 33
    stmt_if            go to state 34
    stmt_switch        go to state 35
    stmt_while         go to state 36
    stmt_for           go to state 37
    stmt_repeat        go to state 38
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 42
    var_list           go to state 43
    expr               go to state 44
    func_call          go to state 45
    func_decl_named    go to state 46
    array_constructor  go to state 47


state 193

   93 func_body: '(' arg_list_decl ')' FUNCTIONARROW type stmt_block .

    $default  reduce using rule 93 (func_body)


state 194

   97 args_decl: args_decl ',' alone_id ':' type .

    $default  reduce using rule 97 (args_decl)


state 195

   33 case_label: CASE expr ':' .

    $default  reduce using rule 33 (case_label)
