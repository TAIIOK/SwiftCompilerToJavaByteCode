Terminals which are not used

   DO
   SELF
   ERROR


State 27 conflicts: 1 shift/reduce
State 34 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce
State 50 conflicts: 2 shift/reduce
State 83 conflicts: 1 shift/reduce
State 138 conflicts: 2 shift/reduce
State 140 conflicts: 1 shift/reduce
State 141 conflicts: 1 shift/reduce
State 165 conflicts: 1 shift/reduce
State 189 conflicts: 1 shift/reduce
State 190 conflicts: 1 shift/reduce
State 194 conflicts: 1 shift/reduce


Grammar

    0 $accept: root $end

    1 end_expr: ENDL
    2         | ';' opt_endl

    3 opt_endl: /* empty */
    4         | ENDL

    5 root: stmt_list

    6 stmt_import: IMPORT var

    7 stmt_block: '{' stmt_list '}'

    8 stmt_list: /* empty */
    9          | stmt_list stmt opt_endl

   10 stmt: stmt_block
   11     | stmt_if
   12     | stmt_while
   13     | stmt_for
   14     | stmt_repeat
   15     | stmt_switch
   16     | BREAK end_expr
   17     | RETURN end_expr
   18     | RETURN expr end_expr
   19     | end_expr
   20     | expr end_expr
   21     | var '=' expr end_expr
   22     | func_decl_named
   23     | stmt_import

   24 stmt_if: IF expr opt_endl stmt_block opt_endl elseif_list opt_endl
   25        | IF expr opt_endl stmt_block opt_endl elseif_list opt_endl ELSE stmt_block opt_endl

   26 elseif_list: /* empty */
   27            | elseif_list ELSEIF expr stmt_block

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases opt_endl '}'

   29 switch_cases: /* empty */
   30             | switch_cases switch_case

   31 switch_case: case_label stmt_list
   32            | default_label stmt_list

   33 case_label: CASE expr ':'

   34 default_label: DEFAULT ':'

   35 stmt_while: WHILE expr stmt_block

   36 stmt_for: FOR alone_id IN expr stmt_block

   37 stmt_repeat: REPEAT stmt_block WHILE expr

   38 alone_id: ID

   39 id_chain: alone_id
   40         | id_chain '.' alone_id

   41 varlet: VAR
   42       | LET

   43 var: id_chain
   44    | var '[' expr ']'
   45    | varlet id_chain
   46    | varlet id_chain ':' '[' varubleType ']'
   47    | varlet id_chain ':' varubleType

   48 expr: var
   49     | INT
   50     | DOUBLE
   51     | STRING
   52     | TRUE
   53     | FALSE
   54     | BOOL
   55     | FLOAT
   56     | NIL
   57     | NOT expr
   58     | '-' expr
   59     | expr NOT
   60     | expr AND expr
   61     | expr OR expr
   62     | expr '+' expr
   63     | expr '-' expr
   64     | expr '*' expr
   65     | expr '/' expr
   66     | expr '%' expr
   67     | expr '>' expr
   68     | expr '<' expr
   69     | expr GE expr
   70     | expr LE expr
   71     | expr EQ expr
   72     | expr NE expr
   73     | expr RANGE expr
   74     | '(' expr ')'
   75     | '[' varubleType ']' '(' ')'
   76     | func_call
   77     | array_constructor

   78 func_call: var '(' arg_list ')'

   79 arg_list: /* empty */
   80         | args

   81 args: expr
   82     | alone_id ':' expr
   83     | args ',' alone_id ':' expr

   84 varubleType: INTT
   85            | STRINGT
   86            | FLOATT
   87            | DOUBLET
   88            | BOOLT
   89            | CHARACTERT
   90            | ARRAYINTT
   91            | ARRAYSTRINGT
   92            | ARRAYFLOATT
   93            | ARRAYDOUBLET
   94            | ARRAYBOOLT

   95 func_decl_named: FUNCTION id_chain func_body

   96 func_body: '(' arg_list_decl ')' FUNCTIONARROW varubleType stmt_block
   97          | '(' arg_list_decl ')' stmt_block

   98 arg_list_decl: /* empty */

   99 @1: /* empty */

  100 arg_list_decl: args_decl @1

  101 args_decl: alone_id ':' varubleType
  102          | args_decl ',' alone_id ':' varubleType

  103 array_constructor: '[' array_elem_list ']'

  104 array_elem_list: /* empty */
  105                | array_elems

  106 array_elems: array_elem
  107            | array_elems ',' array_elem

  108 array_elem: expr


Terminals, with rules where they appear

$end (0) 0
'%' (37) 66
'(' (40) 74 75 78 96 97
')' (41) 74 75 78 96 97
'*' (42) 64
'+' (43) 62
',' (44) 83 102 107
'-' (45) 58 63
'.' (46) 40
'/' (47) 65
':' (58) 33 34 46 47 82 83 101 102
';' (59) 2
'<' (60) 68
'=' (61) 21
'>' (62) 67
'[' (91) 44 46 75 103
']' (93) 44 46 75 103
'{' (123) 7 28
'}' (125) 7 28
error (256)
IMPORT (258) 6
INT (259) 49
FLOAT (260) 55
DOUBLE (261) 50
BOOL (262) 54
STRING (263) 51
ARRAYINTT (264) 90
ARRAYBOOLT (265) 94
ARRAYSTRINGT (266) 91
ARRAYFLOATT (267) 92
ARRAYDOUBLET (268) 93
STRINGT (269) 85
CHARACTERT (270) 89
INTT (271) 84
FLOATT (272) 86
DOUBLET (273) 87
BOOLT (274) 88
TRUE (275) 52
FALSE (276) 53
LET (277) 42
VAR (278) 41
REPEAT (279) 37
WHILE (280) 35 37
FOR (281) 36
IN (282) 36
IF (283) 24 25
ELSE (284) 25
ELSEIF (285) 27
SWITCH (286) 28
CASE (287) 33
DEFAULT (288) 34
BREAK (289) 16
FUNCTION (290) 95
FUNCTIONARROW (291) 96
DO (292)
RANGE (293) 73
RETURN (294) 17 18
NIL (295) 56
SELF (296)
ERROR (297)
ID (298) 38
EQ (299) 71
NE (300) 72
LE (301) 70
GE (302) 69
NOT (303) 57 59
ENDL (304) 1 4
OR (305) 61
AND (306) 60
UMINUS (307)


Nonterminals, with rules where they appear

$accept (71)
    on left: 0
end_expr (72)
    on left: 1 2, on right: 16 17 18 19 20 21
opt_endl (73)
    on left: 3 4, on right: 2 9 24 25 28
root (74)
    on left: 5, on right: 0
stmt_import (75)
    on left: 6, on right: 23
stmt_block (76)
    on left: 7, on right: 10 24 25 27 35 36 37 96 97
stmt_list (77)
    on left: 8 9, on right: 5 7 9 31 32
stmt (78)
    on left: 10 11 12 13 14 15 16 17 18 19 20 21 22 23,
    on right: 9
stmt_if (79)
    on left: 24 25, on right: 11
elseif_list (80)
    on left: 26 27, on right: 24 25 27
stmt_switch (81)
    on left: 28, on right: 15
switch_cases (82)
    on left: 29 30, on right: 28 30
switch_case (83)
    on left: 31 32, on right: 30
case_label (84)
    on left: 33, on right: 31
default_label (85)
    on left: 34, on right: 32
stmt_while (86)
    on left: 35, on right: 12
stmt_for (87)
    on left: 36, on right: 13
stmt_repeat (88)
    on left: 37, on right: 14
alone_id (89)
    on left: 38, on right: 36 39 40 82 83 101 102
id_chain (90)
    on left: 39 40, on right: 40 43 45 46 47 95
varlet (91)
    on left: 41 42, on right: 45 46 47
var (92)
    on left: 43 44 45 46 47, on right: 6 21 44 48 78
expr (93)
    on left: 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65
    66 67 68 69 70 71 72 73 74 75 76 77, on right: 18 20 21 24 25 27
    28 33 35 36 37 44 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
    72 73 74 81 82 83 108
func_call (94)
    on left: 78, on right: 76
arg_list (95)
    on left: 79 80, on right: 78
args (96)
    on left: 81 82 83, on right: 80 83
varubleType (97)
    on left: 84 85 86 87 88 89 90 91 92 93 94, on right: 46 47 75 96
    101 102
func_decl_named (98)
    on left: 95, on right: 22
func_body (99)
    on left: 96 97, on right: 95
arg_list_decl (100)
    on left: 98 100, on right: 96 97
@1 (101)
    on left: 99, on right: 100
args_decl (102)
    on left: 101 102, on right: 100 102
array_constructor (103)
    on left: 103, on right: 77
array_elem_list (104)
    on left: 104 105, on right: 103
array_elems (105)
    on left: 106 107, on right: 105 107
array_elem (106)
    on left: 108, on right: 106 107


state 0

    0 $accept: . root $end

    $default  reduce using rule 8 (stmt_list)

    root       go to state 1
    stmt_list  go to state 2


state 1

    0 $accept: root . $end

    $end  shift, and go to state 3


state 2

    5 root: stmt_list .
    9 stmt_list: stmt_list . stmt opt_endl

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    '-'       shift, and go to state 26
    ';'       shift, and go to state 27
    '{'       shift, and go to state 28
    '['       shift, and go to state 29
    '('       shift, and go to state 30

    $default  reduce using rule 5 (root)

    end_expr           go to state 31
    stmt_import        go to state 32
    stmt_block         go to state 33
    stmt               go to state 34
    stmt_if            go to state 35
    stmt_switch        go to state 36
    stmt_while         go to state 37
    stmt_for           go to state 38
    stmt_repeat        go to state 39
    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 43
    expr               go to state 44
    func_call          go to state 45
    func_decl_named    go to state 46
    array_constructor  go to state 47


state 3

    0 $accept: root $end .

    $default  accept


state 4

    6 stmt_import: IMPORT . var

    LET  shift, and go to state 12
    VAR  shift, and go to state 13
    ID   shift, and go to state 23

    alone_id  go to state 40
    id_chain  go to state 41
    varlet    go to state 42
    var       go to state 48


state 5

   49 expr: INT .

    $default  reduce using rule 49 (expr)


state 6

   55 expr: FLOAT .

    $default  reduce using rule 55 (expr)


state 7

   50 expr: DOUBLE .

    $default  reduce using rule 50 (expr)


state 8

   54 expr: BOOL .

    $default  reduce using rule 54 (expr)


state 9

   51 expr: STRING .

    $default  reduce using rule 51 (expr)


state 10

   52 expr: TRUE .

    $default  reduce using rule 52 (expr)


state 11

   53 expr: FALSE .

    $default  reduce using rule 53 (expr)


state 12

   42 varlet: LET .

    $default  reduce using rule 42 (varlet)


state 13

   41 varlet: VAR .

    $default  reduce using rule 41 (varlet)


state 14

   37 stmt_repeat: REPEAT . stmt_block WHILE expr

    '{'  shift, and go to state 28

    stmt_block  go to state 49


state 15

   35 stmt_while: WHILE . expr stmt_block

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 51
    func_call          go to state 45
    array_constructor  go to state 47


state 16

   36 stmt_for: FOR . alone_id IN expr stmt_block

    ID  shift, and go to state 23

    alone_id  go to state 52


state 17

   24 stmt_if: IF . expr opt_endl stmt_block opt_endl elseif_list opt_endl
   25        | IF . expr opt_endl stmt_block opt_endl elseif_list opt_endl ELSE stmt_block opt_endl

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 53
    func_call          go to state 45
    array_constructor  go to state 47


state 18

   28 stmt_switch: SWITCH . expr opt_endl '{' opt_endl switch_cases opt_endl '}'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 54
    func_call          go to state 45
    array_constructor  go to state 47


state 19

   16 stmt: BREAK . end_expr

    ENDL  shift, and go to state 25
    ';'   shift, and go to state 27

    end_expr  go to state 55


state 20

   95 func_decl_named: FUNCTION . id_chain func_body

    ID  shift, and go to state 23

    alone_id  go to state 40
    id_chain  go to state 56


state 21

   17 stmt: RETURN . end_expr
   18     | RETURN . expr end_expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    ENDL    shift, and go to state 25
    '-'     shift, and go to state 26
    ';'     shift, and go to state 27
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    end_expr           go to state 57
    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 58
    func_call          go to state 45
    array_constructor  go to state 47


state 22

   56 expr: NIL .

    $default  reduce using rule 56 (expr)


state 23

   38 alone_id: ID .

    $default  reduce using rule 38 (alone_id)


state 24

   57 expr: NOT . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 59
    func_call          go to state 45
    array_constructor  go to state 47


state 25

    1 end_expr: ENDL .

    $default  reduce using rule 1 (end_expr)


state 26

   58 expr: '-' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 60
    func_call          go to state 45
    array_constructor  go to state 47


state 27

    2 end_expr: ';' . opt_endl

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 62


state 28

    7 stmt_block: '{' . stmt_list '}'

    $default  reduce using rule 8 (stmt_list)

    stmt_list  go to state 63


state 29

   75 expr: '[' . varubleType ']' '(' ')'
  103 array_constructor: '[' . array_elem_list ']'

    INT           shift, and go to state 5
    FLOAT         shift, and go to state 6
    DOUBLE        shift, and go to state 7
    BOOL          shift, and go to state 8
    STRING        shift, and go to state 9
    ARRAYINTT     shift, and go to state 64
    ARRAYBOOLT    shift, and go to state 65
    ARRAYSTRINGT  shift, and go to state 66
    ARRAYFLOATT   shift, and go to state 67
    ARRAYDOUBLET  shift, and go to state 68
    STRINGT       shift, and go to state 69
    CHARACTERT    shift, and go to state 70
    INTT          shift, and go to state 71
    FLOATT        shift, and go to state 72
    DOUBLET       shift, and go to state 73
    BOOLT         shift, and go to state 74
    TRUE          shift, and go to state 10
    FALSE         shift, and go to state 11
    LET           shift, and go to state 12
    VAR           shift, and go to state 13
    NIL           shift, and go to state 22
    ID            shift, and go to state 23
    NOT           shift, and go to state 24
    '-'           shift, and go to state 26
    '['           shift, and go to state 29
    '('           shift, and go to state 30

    $default  reduce using rule 104 (array_elem_list)

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 75
    func_call          go to state 45
    varubleType        go to state 76
    array_constructor  go to state 47
    array_elem_list    go to state 77
    array_elems        go to state 78
    array_elem         go to state 79


state 30

   74 expr: '(' . expr ')'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 80
    func_call          go to state 45
    array_constructor  go to state 47


state 31

   19 stmt: end_expr .

    $default  reduce using rule 19 (stmt)


state 32

   23 stmt: stmt_import .

    $default  reduce using rule 23 (stmt)


state 33

   10 stmt: stmt_block .

    $default  reduce using rule 10 (stmt)


state 34

    9 stmt_list: stmt_list stmt . opt_endl

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 81


state 35

   11 stmt: stmt_if .

    $default  reduce using rule 11 (stmt)


state 36

   15 stmt: stmt_switch .

    $default  reduce using rule 15 (stmt)


state 37

   12 stmt: stmt_while .

    $default  reduce using rule 12 (stmt)


state 38

   13 stmt: stmt_for .

    $default  reduce using rule 13 (stmt)


state 39

   14 stmt: stmt_repeat .

    $default  reduce using rule 14 (stmt)


state 40

   39 id_chain: alone_id .

    $default  reduce using rule 39 (id_chain)


state 41

   40 id_chain: id_chain . '.' alone_id
   43 var: id_chain .

    '.'  shift, and go to state 82

    $default  reduce using rule 43 (var)


state 42

   45 var: varlet . id_chain
   46    | varlet . id_chain ':' '[' varubleType ']'
   47    | varlet . id_chain ':' varubleType

    ID  shift, and go to state 23

    alone_id  go to state 40
    id_chain  go to state 83


state 43

   21 stmt: var . '=' expr end_expr
   44 var: var . '[' expr ']'
   48 expr: var .
   78 func_call: var . '(' arg_list ')'

    '='  shift, and go to state 84
    '['  shift, and go to state 85
    '('  shift, and go to state 86

    $default  reduce using rule 48 (expr)


state 44

   20 stmt: expr . end_expr
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    ENDL   shift, and go to state 25
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101
    ';'    shift, and go to state 27

    end_expr  go to state 102


state 45

   76 expr: func_call .

    $default  reduce using rule 76 (expr)


state 46

   22 stmt: func_decl_named .

    $default  reduce using rule 22 (stmt)


state 47

   77 expr: array_constructor .

    $default  reduce using rule 77 (expr)


state 48

    6 stmt_import: IMPORT var .
   44 var: var . '[' expr ']'

    '['  shift, and go to state 85

    '['       [reduce using rule 6 (stmt_import)]
    $default  reduce using rule 6 (stmt_import)


state 49

   37 stmt_repeat: REPEAT stmt_block . WHILE expr

    WHILE  shift, and go to state 103


state 50

   44 var: var . '[' expr ']'
   48 expr: var .
   78 func_call: var . '(' arg_list ')'

    '['  shift, and go to state 85
    '('  shift, and go to state 86

    '['       [reduce using rule 48 (expr)]
    '('       [reduce using rule 48 (expr)]
    $default  reduce using rule 48 (expr)


state 51

   35 stmt_while: WHILE expr . stmt_block
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101
    '{'    shift, and go to state 28

    stmt_block  go to state 104


state 52

   36 stmt_for: FOR alone_id . IN expr stmt_block

    IN  shift, and go to state 105


state 53

   24 stmt_if: IF expr . opt_endl stmt_block opt_endl elseif_list opt_endl
   25        | IF expr . opt_endl stmt_block opt_endl elseif_list opt_endl ELSE stmt_block opt_endl
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    ENDL   shift, and go to state 61
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101

    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 106


state 54

   28 stmt_switch: SWITCH expr . opt_endl '{' opt_endl switch_cases opt_endl '}'
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    ENDL   shift, and go to state 61
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101

    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 107


state 55

   16 stmt: BREAK end_expr .

    $default  reduce using rule 16 (stmt)


state 56

   40 id_chain: id_chain . '.' alone_id
   95 func_decl_named: FUNCTION id_chain . func_body

    '.'  shift, and go to state 82
    '('  shift, and go to state 108

    func_body  go to state 109


state 57

   17 stmt: RETURN end_expr .

    $default  reduce using rule 17 (stmt)


state 58

   18 stmt: RETURN expr . end_expr
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    ENDL   shift, and go to state 25
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101
    ';'    shift, and go to state 27

    end_expr  go to state 110


state 59

   57 expr: NOT expr .
   59     | expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    $default  reduce using rule 57 (expr)


state 60

   58 expr: '-' expr .
   59     | expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    $default  reduce using rule 58 (expr)


state 61

    4 opt_endl: ENDL .

    $default  reduce using rule 4 (opt_endl)


state 62

    2 end_expr: ';' opt_endl .

    $default  reduce using rule 2 (end_expr)


state 63

    7 stmt_block: '{' stmt_list . '}'
    9 stmt_list: stmt_list . stmt opt_endl

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    '-'       shift, and go to state 26
    ';'       shift, and go to state 27
    '{'       shift, and go to state 28
    '}'       shift, and go to state 111
    '['       shift, and go to state 29
    '('       shift, and go to state 30

    end_expr           go to state 31
    stmt_import        go to state 32
    stmt_block         go to state 33
    stmt               go to state 34
    stmt_if            go to state 35
    stmt_switch        go to state 36
    stmt_while         go to state 37
    stmt_for           go to state 38
    stmt_repeat        go to state 39
    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 43
    expr               go to state 44
    func_call          go to state 45
    func_decl_named    go to state 46
    array_constructor  go to state 47


state 64

   90 varubleType: ARRAYINTT .

    $default  reduce using rule 90 (varubleType)


state 65

   94 varubleType: ARRAYBOOLT .

    $default  reduce using rule 94 (varubleType)


state 66

   91 varubleType: ARRAYSTRINGT .

    $default  reduce using rule 91 (varubleType)


state 67

   92 varubleType: ARRAYFLOATT .

    $default  reduce using rule 92 (varubleType)


state 68

   93 varubleType: ARRAYDOUBLET .

    $default  reduce using rule 93 (varubleType)


state 69

   85 varubleType: STRINGT .

    $default  reduce using rule 85 (varubleType)


state 70

   89 varubleType: CHARACTERT .

    $default  reduce using rule 89 (varubleType)


state 71

   84 varubleType: INTT .

    $default  reduce using rule 84 (varubleType)


state 72

   86 varubleType: FLOATT .

    $default  reduce using rule 86 (varubleType)


state 73

   87 varubleType: DOUBLET .

    $default  reduce using rule 87 (varubleType)


state 74

   88 varubleType: BOOLT .

    $default  reduce using rule 88 (varubleType)


state 75

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr
  108 array_elem: expr .

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101

    $default  reduce using rule 108 (array_elem)


state 76

   75 expr: '[' varubleType . ']' '(' ')'

    ']'  shift, and go to state 112


state 77

  103 array_constructor: '[' array_elem_list . ']'

    ']'  shift, and go to state 113


state 78

  105 array_elem_list: array_elems .
  107 array_elems: array_elems . ',' array_elem

    ','  shift, and go to state 114

    $default  reduce using rule 105 (array_elem_list)


state 79

  106 array_elems: array_elem .

    $default  reduce using rule 106 (array_elems)


state 80

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr
   74     | '(' expr . ')'

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101
    ')'    shift, and go to state 115


state 81

    9 stmt_list: stmt_list stmt opt_endl .

    $default  reduce using rule 9 (stmt_list)


state 82

   40 id_chain: id_chain '.' . alone_id

    ID  shift, and go to state 23

    alone_id  go to state 116


state 83

   40 id_chain: id_chain . '.' alone_id
   45 var: varlet id_chain .
   46    | varlet id_chain . ':' '[' varubleType ']'
   47    | varlet id_chain . ':' varubleType

    ':'  shift, and go to state 117
    '.'  shift, and go to state 82

    ':'       [reduce using rule 45 (var)]
    $default  reduce using rule 45 (var)


state 84

   21 stmt: var '=' . expr end_expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 118
    func_call          go to state 45
    array_constructor  go to state 47


state 85

   44 var: var '[' . expr ']'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 119
    func_call          go to state 45
    array_constructor  go to state 47


state 86

   78 func_call: var '(' . arg_list ')'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    $default  reduce using rule 79 (arg_list)

    alone_id           go to state 120
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 121
    func_call          go to state 45
    arg_list           go to state 122
    args               go to state 123
    array_constructor  go to state 47


state 87

   73 expr: expr RANGE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 124
    func_call          go to state 45
    array_constructor  go to state 47


state 88

   71 expr: expr EQ . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 125
    func_call          go to state 45
    array_constructor  go to state 47


state 89

   72 expr: expr NE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 126
    func_call          go to state 45
    array_constructor  go to state 47


state 90

   70 expr: expr LE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 127
    func_call          go to state 45
    array_constructor  go to state 47


state 91

   69 expr: expr GE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 128
    func_call          go to state 45
    array_constructor  go to state 47


state 92

   59 expr: expr NOT .

    $default  reduce using rule 59 (expr)


state 93

   61 expr: expr OR . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 129
    func_call          go to state 45
    array_constructor  go to state 47


state 94

   60 expr: expr AND . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 130
    func_call          go to state 45
    array_constructor  go to state 47


state 95

   68 expr: expr '<' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 131
    func_call          go to state 45
    array_constructor  go to state 47


state 96

   67 expr: expr '>' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 132
    func_call          go to state 45
    array_constructor  go to state 47


state 97

   62 expr: expr '+' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 133
    func_call          go to state 45
    array_constructor  go to state 47


state 98

   63 expr: expr '-' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 134
    func_call          go to state 45
    array_constructor  go to state 47


state 99

   64 expr: expr '*' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 135
    func_call          go to state 45
    array_constructor  go to state 47


state 100

   65 expr: expr '/' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 136
    func_call          go to state 45
    array_constructor  go to state 47


state 101

   66 expr: expr '%' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 137
    func_call          go to state 45
    array_constructor  go to state 47


state 102

   20 stmt: expr end_expr .

    $default  reduce using rule 20 (stmt)


state 103

   37 stmt_repeat: REPEAT stmt_block WHILE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 138
    func_call          go to state 45
    array_constructor  go to state 47


state 104

   35 stmt_while: WHILE expr stmt_block .

    $default  reduce using rule 35 (stmt_while)


state 105

   36 stmt_for: FOR alone_id IN . expr stmt_block

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 139
    func_call          go to state 45
    array_constructor  go to state 47


state 106

   24 stmt_if: IF expr opt_endl . stmt_block opt_endl elseif_list opt_endl
   25        | IF expr opt_endl . stmt_block opt_endl elseif_list opt_endl ELSE stmt_block opt_endl

    '{'  shift, and go to state 28

    stmt_block  go to state 140


state 107

   28 stmt_switch: SWITCH expr opt_endl . '{' opt_endl switch_cases opt_endl '}'

    '{'  shift, and go to state 141


state 108

   96 func_body: '(' . arg_list_decl ')' FUNCTIONARROW varubleType stmt_block
   97          | '(' . arg_list_decl ')' stmt_block

    ID  shift, and go to state 23

    $default  reduce using rule 98 (arg_list_decl)

    alone_id       go to state 142
    arg_list_decl  go to state 143
    args_decl      go to state 144


state 109

   95 func_decl_named: FUNCTION id_chain func_body .

    $default  reduce using rule 95 (func_decl_named)


state 110

   18 stmt: RETURN expr end_expr .

    $default  reduce using rule 18 (stmt)


state 111

    7 stmt_block: '{' stmt_list '}' .

    $default  reduce using rule 7 (stmt_block)


state 112

   75 expr: '[' varubleType ']' . '(' ')'

    '('  shift, and go to state 145


state 113

  103 array_constructor: '[' array_elem_list ']' .

    $default  reduce using rule 103 (array_constructor)


state 114

  107 array_elems: array_elems ',' . array_elem

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 75
    func_call          go to state 45
    array_constructor  go to state 47
    array_elem         go to state 146


state 115

   74 expr: '(' expr ')' .

    $default  reduce using rule 74 (expr)


state 116

   40 id_chain: id_chain '.' alone_id .

    $default  reduce using rule 40 (id_chain)


state 117

   46 var: varlet id_chain ':' . '[' varubleType ']'
   47    | varlet id_chain ':' . varubleType

    ARRAYINTT     shift, and go to state 64
    ARRAYBOOLT    shift, and go to state 65
    ARRAYSTRINGT  shift, and go to state 66
    ARRAYFLOATT   shift, and go to state 67
    ARRAYDOUBLET  shift, and go to state 68
    STRINGT       shift, and go to state 69
    CHARACTERT    shift, and go to state 70
    INTT          shift, and go to state 71
    FLOATT        shift, and go to state 72
    DOUBLET       shift, and go to state 73
    BOOLT         shift, and go to state 74
    '['           shift, and go to state 147

    varubleType  go to state 148


state 118

   21 stmt: var '=' expr . end_expr
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    ENDL   shift, and go to state 25
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101
    ';'    shift, and go to state 27

    end_expr  go to state 149


state 119

   44 var: var '[' expr . ']'
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101
    ']'    shift, and go to state 150


state 120

   39 id_chain: alone_id .
   82 args: alone_id . ':' expr

    ':'  shift, and go to state 151

    $default  reduce using rule 39 (id_chain)


state 121

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr
   81 args: expr .

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101

    $default  reduce using rule 81 (args)


state 122

   78 func_call: var '(' arg_list . ')'

    ')'  shift, and go to state 152


state 123

   80 arg_list: args .
   83 args: args . ',' alone_id ':' expr

    ','  shift, and go to state 153

    $default  reduce using rule 80 (arg_list)


state 124

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr
   73     | expr RANGE expr .

    NOT  shift, and go to state 92
    '+'  shift, and go to state 97
    '-'  shift, and go to state 98
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100
    '%'  shift, and go to state 101

    $default  reduce using rule 73 (expr)


state 125

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   71     | expr EQ expr .
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92
    '+'  shift, and go to state 97
    '-'  shift, and go to state 98
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100
    '%'  shift, and go to state 101

    $default  reduce using rule 71 (expr)


state 126

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   72     | expr NE expr .
   73     | expr . RANGE expr

    NOT  shift, and go to state 92
    '+'  shift, and go to state 97
    '-'  shift, and go to state 98
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100
    '%'  shift, and go to state 101

    $default  reduce using rule 72 (expr)


state 127

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   70     | expr LE expr .
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92
    '+'  shift, and go to state 97
    '-'  shift, and go to state 98
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100
    '%'  shift, and go to state 101

    $default  reduce using rule 70 (expr)


state 128

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   69     | expr GE expr .
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92
    '+'  shift, and go to state 97
    '-'  shift, and go to state 98
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100
    '%'  shift, and go to state 101

    $default  reduce using rule 69 (expr)


state 129

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   61     | expr OR expr .
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101

    $default  reduce using rule 61 (expr)


state 130

   59 expr: expr . NOT
   60     | expr . AND expr
   60     | expr AND expr .
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101

    $default  reduce using rule 60 (expr)


state 131

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   68     | expr '<' expr .
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92
    '+'  shift, and go to state 97
    '-'  shift, and go to state 98
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100
    '%'  shift, and go to state 101

    $default  reduce using rule 68 (expr)


state 132

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   67     | expr '>' expr .
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92
    '+'  shift, and go to state 97
    '-'  shift, and go to state 98
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100
    '%'  shift, and go to state 101

    $default  reduce using rule 67 (expr)


state 133

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   62     | expr '+' expr .
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100
    '%'  shift, and go to state 101

    $default  reduce using rule 62 (expr)


state 134

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   63     | expr '-' expr .
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92
    '*'  shift, and go to state 99
    '/'  shift, and go to state 100
    '%'  shift, and go to state 101

    $default  reduce using rule 63 (expr)


state 135

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   64     | expr '*' expr .
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92

    $default  reduce using rule 64 (expr)


state 136

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   65     | expr '/' expr .
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92

    $default  reduce using rule 65 (expr)


state 137

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   66     | expr '%' expr .
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    NOT  shift, and go to state 92

    $default  reduce using rule 66 (expr)


state 138

   37 stmt_repeat: REPEAT stmt_block WHILE expr .
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101

    NOT       [reduce using rule 37 (stmt_repeat)]
    '-'       [reduce using rule 37 (stmt_repeat)]
    $default  reduce using rule 37 (stmt_repeat)


state 139

   36 stmt_for: FOR alone_id IN expr . stmt_block
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101
    '{'    shift, and go to state 28

    stmt_block  go to state 154


state 140

   24 stmt_if: IF expr opt_endl stmt_block . opt_endl elseif_list opt_endl
   25        | IF expr opt_endl stmt_block . opt_endl elseif_list opt_endl ELSE stmt_block opt_endl

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 155


state 141

   28 stmt_switch: SWITCH expr opt_endl '{' . opt_endl switch_cases opt_endl '}'

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 156


state 142

  101 args_decl: alone_id . ':' varubleType

    ':'  shift, and go to state 157


state 143

   96 func_body: '(' arg_list_decl . ')' FUNCTIONARROW varubleType stmt_block
   97          | '(' arg_list_decl . ')' stmt_block

    ')'  shift, and go to state 158


state 144

  100 arg_list_decl: args_decl . @1
  102 args_decl: args_decl . ',' alone_id ':' varubleType

    ','  shift, and go to state 159

    $default  reduce using rule 99 (@1)

    @1  go to state 160


state 145

   75 expr: '[' varubleType ']' '(' . ')'

    ')'  shift, and go to state 161


state 146

  107 array_elems: array_elems ',' array_elem .

    $default  reduce using rule 107 (array_elems)


state 147

   46 var: varlet id_chain ':' '[' . varubleType ']'

    ARRAYINTT     shift, and go to state 64
    ARRAYBOOLT    shift, and go to state 65
    ARRAYSTRINGT  shift, and go to state 66
    ARRAYFLOATT   shift, and go to state 67
    ARRAYDOUBLET  shift, and go to state 68
    STRINGT       shift, and go to state 69
    CHARACTERT    shift, and go to state 70
    INTT          shift, and go to state 71
    FLOATT        shift, and go to state 72
    DOUBLET       shift, and go to state 73
    BOOLT         shift, and go to state 74

    varubleType  go to state 162


state 148

   47 var: varlet id_chain ':' varubleType .

    $default  reduce using rule 47 (var)


state 149

   21 stmt: var '=' expr end_expr .

    $default  reduce using rule 21 (stmt)


state 150

   44 var: var '[' expr ']' .

    $default  reduce using rule 44 (var)


state 151

   82 args: alone_id ':' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 163
    func_call          go to state 45
    array_constructor  go to state 47


state 152

   78 func_call: var '(' arg_list ')' .

    $default  reduce using rule 78 (func_call)


state 153

   83 args: args ',' . alone_id ':' expr

    ID  shift, and go to state 23

    alone_id  go to state 164


state 154

   36 stmt_for: FOR alone_id IN expr stmt_block .

    $default  reduce using rule 36 (stmt_for)


state 155

   24 stmt_if: IF expr opt_endl stmt_block opt_endl . elseif_list opt_endl
   25        | IF expr opt_endl stmt_block opt_endl . elseif_list opt_endl ELSE stmt_block opt_endl

    $default  reduce using rule 26 (elseif_list)

    elseif_list  go to state 165


state 156

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl . switch_cases opt_endl '}'

    $default  reduce using rule 29 (switch_cases)

    switch_cases  go to state 166


state 157

  101 args_decl: alone_id ':' . varubleType

    ARRAYINTT     shift, and go to state 64
    ARRAYBOOLT    shift, and go to state 65
    ARRAYSTRINGT  shift, and go to state 66
    ARRAYFLOATT   shift, and go to state 67
    ARRAYDOUBLET  shift, and go to state 68
    STRINGT       shift, and go to state 69
    CHARACTERT    shift, and go to state 70
    INTT          shift, and go to state 71
    FLOATT        shift, and go to state 72
    DOUBLET       shift, and go to state 73
    BOOLT         shift, and go to state 74

    varubleType  go to state 167


state 158

   96 func_body: '(' arg_list_decl ')' . FUNCTIONARROW varubleType stmt_block
   97          | '(' arg_list_decl ')' . stmt_block

    FUNCTIONARROW  shift, and go to state 168
    '{'            shift, and go to state 28

    stmt_block  go to state 169


state 159

  102 args_decl: args_decl ',' . alone_id ':' varubleType

    ID  shift, and go to state 23

    alone_id  go to state 170


state 160

  100 arg_list_decl: args_decl @1 .

    $default  reduce using rule 100 (arg_list_decl)


state 161

   75 expr: '[' varubleType ']' '(' ')' .

    $default  reduce using rule 75 (expr)


state 162

   46 var: varlet id_chain ':' '[' varubleType . ']'

    ']'  shift, and go to state 171


state 163

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr
   82 args: alone_id ':' expr .

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101

    $default  reduce using rule 82 (args)


state 164

   83 args: args ',' alone_id . ':' expr

    ':'  shift, and go to state 172


state 165

   24 stmt_if: IF expr opt_endl stmt_block opt_endl elseif_list . opt_endl
   25        | IF expr opt_endl stmt_block opt_endl elseif_list . opt_endl ELSE stmt_block opt_endl
   27 elseif_list: elseif_list . ELSEIF expr stmt_block

    ELSEIF  shift, and go to state 173
    ENDL    shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 174


state 166

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases . opt_endl '}'
   30 switch_cases: switch_cases . switch_case

    CASE     shift, and go to state 175
    DEFAULT  shift, and go to state 176
    ENDL     shift, and go to state 61

    $default  reduce using rule 3 (opt_endl)

    opt_endl       go to state 177
    switch_case    go to state 178
    case_label     go to state 179
    default_label  go to state 180


state 167

  101 args_decl: alone_id ':' varubleType .

    $default  reduce using rule 101 (args_decl)


state 168

   96 func_body: '(' arg_list_decl ')' FUNCTIONARROW . varubleType stmt_block

    ARRAYINTT     shift, and go to state 64
    ARRAYBOOLT    shift, and go to state 65
    ARRAYSTRINGT  shift, and go to state 66
    ARRAYFLOATT   shift, and go to state 67
    ARRAYDOUBLET  shift, and go to state 68
    STRINGT       shift, and go to state 69
    CHARACTERT    shift, and go to state 70
    INTT          shift, and go to state 71
    FLOATT        shift, and go to state 72
    DOUBLET       shift, and go to state 73
    BOOLT         shift, and go to state 74

    varubleType  go to state 181


state 169

   97 func_body: '(' arg_list_decl ')' stmt_block .

    $default  reduce using rule 97 (func_body)


state 170

  102 args_decl: args_decl ',' alone_id . ':' varubleType

    ':'  shift, and go to state 182


state 171

   46 var: varlet id_chain ':' '[' varubleType ']' .

    $default  reduce using rule 46 (var)


state 172

   83 args: args ',' alone_id ':' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 183
    func_call          go to state 45
    array_constructor  go to state 47


state 173

   27 elseif_list: elseif_list ELSEIF . expr stmt_block

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 184
    func_call          go to state 45
    array_constructor  go to state 47


state 174

   24 stmt_if: IF expr opt_endl stmt_block opt_endl elseif_list opt_endl .
   25        | IF expr opt_endl stmt_block opt_endl elseif_list opt_endl . ELSE stmt_block opt_endl

    ELSE  shift, and go to state 185

    $default  reduce using rule 24 (stmt_if)


state 175

   33 case_label: CASE . expr ':'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '-'     shift, and go to state 26
    '['     shift, and go to state 29
    '('     shift, and go to state 30

    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 50
    expr               go to state 186
    func_call          go to state 45
    array_constructor  go to state 47


state 176

   34 default_label: DEFAULT . ':'

    ':'  shift, and go to state 187


state 177

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases opt_endl . '}'

    '}'  shift, and go to state 188


state 178

   30 switch_cases: switch_cases switch_case .

    $default  reduce using rule 30 (switch_cases)


state 179

   31 switch_case: case_label . stmt_list

    $default  reduce using rule 8 (stmt_list)

    stmt_list  go to state 189


state 180

   32 switch_case: default_label . stmt_list

    $default  reduce using rule 8 (stmt_list)

    stmt_list  go to state 190


state 181

   96 func_body: '(' arg_list_decl ')' FUNCTIONARROW varubleType . stmt_block

    '{'  shift, and go to state 28

    stmt_block  go to state 191


state 182

  102 args_decl: args_decl ',' alone_id ':' . varubleType

    ARRAYINTT     shift, and go to state 64
    ARRAYBOOLT    shift, and go to state 65
    ARRAYSTRINGT  shift, and go to state 66
    ARRAYFLOATT   shift, and go to state 67
    ARRAYDOUBLET  shift, and go to state 68
    STRINGT       shift, and go to state 69
    CHARACTERT    shift, and go to state 70
    INTT          shift, and go to state 71
    FLOATT        shift, and go to state 72
    DOUBLET       shift, and go to state 73
    BOOLT         shift, and go to state 74

    varubleType  go to state 192


state 183

   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr
   83 args: args ',' alone_id ':' expr .

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101

    $default  reduce using rule 83 (args)


state 184

   27 elseif_list: elseif_list ELSEIF expr . stmt_block
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101
    '{'    shift, and go to state 28

    stmt_block  go to state 193


state 185

   25 stmt_if: IF expr opt_endl stmt_block opt_endl elseif_list opt_endl ELSE . stmt_block opt_endl

    '{'  shift, and go to state 28

    stmt_block  go to state 194


state 186

   33 case_label: CASE expr . ':'
   59 expr: expr . NOT
   60     | expr . AND expr
   61     | expr . OR expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . '>' expr
   68     | expr . '<' expr
   69     | expr . GE expr
   70     | expr . LE expr
   71     | expr . EQ expr
   72     | expr . NE expr
   73     | expr . RANGE expr

    RANGE  shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    LE     shift, and go to state 90
    GE     shift, and go to state 91
    NOT    shift, and go to state 92
    OR     shift, and go to state 93
    AND    shift, and go to state 94
    '<'    shift, and go to state 95
    '>'    shift, and go to state 96
    '+'    shift, and go to state 97
    '-'    shift, and go to state 98
    '*'    shift, and go to state 99
    '/'    shift, and go to state 100
    '%'    shift, and go to state 101
    ':'    shift, and go to state 195


state 187

   34 default_label: DEFAULT ':' .

    $default  reduce using rule 34 (default_label)


state 188

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases opt_endl '}' .

    $default  reduce using rule 28 (stmt_switch)


state 189

    9 stmt_list: stmt_list . stmt opt_endl
   31 switch_case: case_label stmt_list .

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    '-'       shift, and go to state 26
    ';'       shift, and go to state 27
    '{'       shift, and go to state 28
    '['       shift, and go to state 29
    '('       shift, and go to state 30

    ENDL      [reduce using rule 31 (switch_case)]
    $default  reduce using rule 31 (switch_case)

    end_expr           go to state 31
    stmt_import        go to state 32
    stmt_block         go to state 33
    stmt               go to state 34
    stmt_if            go to state 35
    stmt_switch        go to state 36
    stmt_while         go to state 37
    stmt_for           go to state 38
    stmt_repeat        go to state 39
    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 43
    expr               go to state 44
    func_call          go to state 45
    func_decl_named    go to state 46
    array_constructor  go to state 47


state 190

    9 stmt_list: stmt_list . stmt opt_endl
   32 switch_case: default_label stmt_list .

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    '-'       shift, and go to state 26
    ';'       shift, and go to state 27
    '{'       shift, and go to state 28
    '['       shift, and go to state 29
    '('       shift, and go to state 30

    ENDL      [reduce using rule 32 (switch_case)]
    $default  reduce using rule 32 (switch_case)

    end_expr           go to state 31
    stmt_import        go to state 32
    stmt_block         go to state 33
    stmt               go to state 34
    stmt_if            go to state 35
    stmt_switch        go to state 36
    stmt_while         go to state 37
    stmt_for           go to state 38
    stmt_repeat        go to state 39
    alone_id           go to state 40
    id_chain           go to state 41
    varlet             go to state 42
    var                go to state 43
    expr               go to state 44
    func_call          go to state 45
    func_decl_named    go to state 46
    array_constructor  go to state 47


state 191

   96 func_body: '(' arg_list_decl ')' FUNCTIONARROW varubleType stmt_block .

    $default  reduce using rule 96 (func_body)


state 192

  102 args_decl: args_decl ',' alone_id ':' varubleType .

    $default  reduce using rule 102 (args_decl)


state 193

   27 elseif_list: elseif_list ELSEIF expr stmt_block .

    $default  reduce using rule 27 (elseif_list)


state 194

   25 stmt_if: IF expr opt_endl stmt_block opt_endl elseif_list opt_endl ELSE stmt_block . opt_endl

    ENDL  shift, and go to state 61

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 196


state 195

   33 case_label: CASE expr ':' .

    $default  reduce using rule 33 (case_label)


state 196

   25 stmt_if: IF expr opt_endl stmt_block opt_endl elseif_list opt_endl ELSE stmt_block opt_endl .

    $default  reduce using rule 25 (stmt_if)
