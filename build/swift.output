Terminals which are not used

   DO
   SELF
   ERROR


State 26 conflicts: 1 shift/reduce
State 33 conflicts: 1 shift/reduce
State 49 conflicts: 1 shift/reduce
State 76 conflicts: 1 shift/reduce
State 103 conflicts: 1 shift/reduce
State 129 conflicts: 1 shift/reduce
State 132 conflicts: 1 shift/reduce
State 146 conflicts: 1 shift/reduce
State 166 conflicts: 1 shift/reduce
State 182 conflicts: 1 shift/reduce
State 183 conflicts: 1 shift/reduce


Grammar

    0 $accept: root $end

    1 end_expr: ENDL
    2         | ';' opt_endl

    3 opt_endl: /* empty */
    4         | ENDL

    5 root: stmt_list

    6 stmt_import: IMPORT var

    7 stmt_block: '{' stmt_list '}' opt_endl

    8 stmt_list: /* empty */
    9          | stmt_list stmt opt_endl

   10 stmt: stmt_block
   11     | stmt_if
   12     | stmt_while
   13     | stmt_for
   14     | stmt_repeat
   15     | stmt_switch
   16     | BREAK end_expr
   17     | RETURN end_expr
   18     | RETURN expr end_expr
   19     | expr end_expr
   20     | var '=' expr end_expr
   21     | func_decl_named
   22     | end_expr
   23     | stmt_import

   24 stmt_if: IF expr opt_endl stmt_block elseif_list opt_endl
   25        | IF expr opt_endl stmt_block elseif_list ELSE stmt_block opt_endl

   26 elseif_list: /* empty */
   27            | elseif_list ELSEIF expr stmt_block

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases opt_endl '}'

   29 switch_cases: /* empty */
   30             | switch_cases switch_case

   31 switch_case: case_label stmt_list
   32            | default_label stmt_list

   33 case_label: CASE expr ':'

   34 default_label: DEFAULT ':'

   35 stmt_while: WHILE expr stmt_block

   36 stmt_for: FOR alone_id IN expr stmt_block

   37 stmt_repeat: REPEAT stmt_block WHILE expr

   38 alone_id: ID

   39 id_chain: alone_id
   40         | id_chain '.' alone_id

   41 varlet: VAR
   42       | LET

   43 var: id_chain
   44    | varlet id_chain
   45    | varlet id_chain ':' '[' varubleType ']'
   46    | varlet id_chain ':' varubleType

   47 expr: var
   48     | INT
   49     | DOUBLE
   50     | STRING
   51     | TRUE
   52     | FALSE
   53     | BOOL
   54     | FLOAT
   55     | NIL
   56     | NOT expr
   57     | expr NOT
   58     | expr AND expr
   59     | expr OR expr
   60     | expr '+' expr
   61     | expr '-' expr
   62     | expr '*' expr
   63     | expr '/' expr
   64     | expr '%' expr
   65     | expr '>' expr
   66     | expr '<' expr
   67     | expr GE expr
   68     | expr LE expr
   69     | expr EQ expr
   70     | expr NE expr
   71     | expr RANGE expr
   72     | '(' expr ')'
   73     | '[' varubleType ']' '(' ')'
   74     | func_call
   75     | array_constructor

   76 func_call: var '(' arg_list ')'

   77 arg_list: /* empty */
   78         | args

   79 args: expr
   80     | id_chain ':' expr
   81     | args ',' alone_id ':' expr

   82 varubleType: INTT
   83            | STRINGT
   84            | FLOATT
   85            | DOUBLET
   86            | BOOLT
   87            | CHARACTERT

   88 func_decl_named: FUNCTION id_chain func_body

   89 func_body: '(' arg_list_decl ')' FUNCTIONARROW varubleType stmt_block
   90          | '(' arg_list_decl ')' stmt_block

   91 arg_list_decl: /* empty */

   92 @1: /* empty */

   93 arg_list_decl: args_decl @1

   94 args_decl: alone_id ':' varubleType
   95          | args_decl ',' alone_id ':' varubleType

   96 array_constructor: '[' array_elem_list ']'

   97 array_elem_list: /* empty */
   98                | array_elems

   99 array_elems: array_elem
  100            | array_elems ',' array_elem

  101 array_elem: expr


Terminals, with rules where they appear

$end (0) 0
'%' (37) 64
'(' (40) 72 73 76 89 90
')' (41) 72 73 76 89 90
'*' (42) 62
'+' (43) 60
',' (44) 81 95 100
'-' (45) 61
'.' (46) 40
'/' (47) 63
':' (58) 33 34 45 46 80 81 94 95
';' (59) 2
'<' (60) 66
'=' (61) 20
'>' (62) 65
'[' (91) 45 73 96
']' (93) 45 73 96
'{' (123) 7 28
'}' (125) 7 28
error (256)
IMPORT (258) 6
INT (259) 48
FLOAT (260) 54
DOUBLE (261) 49
BOOL (262) 53
STRING (263) 50
STRINGT (264) 83
CHARACTERT (265) 87
INTT (266) 82
FLOATT (267) 84
DOUBLET (268) 85
BOOLT (269) 86
TRUE (270) 51
FALSE (271) 52
LET (272) 42
VAR (273) 41
REPEAT (274) 37
WHILE (275) 35 37
FOR (276) 36
IN (277) 36
IF (278) 24 25
ELSE (279) 25
ELSEIF (280) 27
SWITCH (281) 28
CASE (282) 33
DEFAULT (283) 34
BREAK (284) 16
FUNCTION (285) 88
FUNCTIONARROW (286) 89
DO (287)
RANGE (288) 71
RETURN (289) 17 18
NIL (290) 55
SELF (291)
ERROR (292)
ID (293) 38
EQ (294) 69
NE (295) 70
LE (296) 68
GE (297) 67
NOT (298) 56 57
ENDL (299) 1 4
OR (300) 59
AND (301) 58


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
end_expr (66)
    on left: 1 2, on right: 16 17 18 19 20 22
opt_endl (67)
    on left: 3 4, on right: 2 7 9 24 25 28
root (68)
    on left: 5, on right: 0
stmt_import (69)
    on left: 6, on right: 23
stmt_block (70)
    on left: 7, on right: 10 24 25 27 35 36 37 89 90
stmt_list (71)
    on left: 8 9, on right: 5 7 9 31 32
stmt (72)
    on left: 10 11 12 13 14 15 16 17 18 19 20 21 22 23,
    on right: 9
stmt_if (73)
    on left: 24 25, on right: 11
elseif_list (74)
    on left: 26 27, on right: 24 25 27
stmt_switch (75)
    on left: 28, on right: 15
switch_cases (76)
    on left: 29 30, on right: 28 30
switch_case (77)
    on left: 31 32, on right: 30
case_label (78)
    on left: 33, on right: 31
default_label (79)
    on left: 34, on right: 32
stmt_while (80)
    on left: 35, on right: 12
stmt_for (81)
    on left: 36, on right: 13
stmt_repeat (82)
    on left: 37, on right: 14
alone_id (83)
    on left: 38, on right: 36 39 40 81 94 95
id_chain (84)
    on left: 39 40, on right: 40 43 44 45 46 80 88
varlet (85)
    on left: 41 42, on right: 44 45 46
var (86)
    on left: 43 44 45 46, on right: 6 20 47 76
expr (87)
    on left: 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64
    65 66 67 68 69 70 71 72 73 74 75, on right: 18 19 20 24 25 27 28
    33 35 36 37 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72
    79 80 81 101
func_call (88)
    on left: 76, on right: 74
arg_list (89)
    on left: 77 78, on right: 76
args (90)
    on left: 79 80 81, on right: 78 81
varubleType (91)
    on left: 82 83 84 85 86 87, on right: 45 46 73 89 94 95
func_decl_named (92)
    on left: 88, on right: 21
func_body (93)
    on left: 89 90, on right: 88
arg_list_decl (94)
    on left: 91 93, on right: 89 90
@1 (95)
    on left: 92, on right: 93
args_decl (96)
    on left: 94 95, on right: 93 95
array_constructor (97)
    on left: 96, on right: 75
array_elem_list (98)
    on left: 97 98, on right: 96
array_elems (99)
    on left: 99 100, on right: 98 100
array_elem (100)
    on left: 101, on right: 99 100


state 0

    0 $accept: . root $end

    $default  reduce using rule 8 (stmt_list)

    root       go to state 1
    stmt_list  go to state 2


state 1

    0 $accept: root . $end

    $end  shift, and go to state 3


state 2

    5 root: stmt_list .
    9 stmt_list: stmt_list . stmt opt_endl

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    ';'       shift, and go to state 26
    '{'       shift, and go to state 27
    '['       shift, and go to state 28
    '('       shift, and go to state 29

    $default  reduce using rule 5 (root)

    end_expr           go to state 30
    stmt_import        go to state 31
    stmt_block         go to state 32
    stmt               go to state 33
    stmt_if            go to state 34
    stmt_switch        go to state 35
    stmt_while         go to state 36
    stmt_for           go to state 37
    stmt_repeat        go to state 38
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 42
    expr               go to state 43
    func_call          go to state 44
    func_decl_named    go to state 45
    array_constructor  go to state 46


state 3

    0 $accept: root $end .

    $default  accept


state 4

    6 stmt_import: IMPORT . var

    LET  shift, and go to state 12
    VAR  shift, and go to state 13
    ID   shift, and go to state 23

    alone_id  go to state 39
    id_chain  go to state 40
    varlet    go to state 41
    var       go to state 47


state 5

   48 expr: INT .

    $default  reduce using rule 48 (expr)


state 6

   54 expr: FLOAT .

    $default  reduce using rule 54 (expr)


state 7

   49 expr: DOUBLE .

    $default  reduce using rule 49 (expr)


state 8

   53 expr: BOOL .

    $default  reduce using rule 53 (expr)


state 9

   50 expr: STRING .

    $default  reduce using rule 50 (expr)


state 10

   51 expr: TRUE .

    $default  reduce using rule 51 (expr)


state 11

   52 expr: FALSE .

    $default  reduce using rule 52 (expr)


state 12

   42 varlet: LET .

    $default  reduce using rule 42 (varlet)


state 13

   41 varlet: VAR .

    $default  reduce using rule 41 (varlet)


state 14

   37 stmt_repeat: REPEAT . stmt_block WHILE expr

    '{'  shift, and go to state 27

    stmt_block  go to state 48


state 15

   35 stmt_while: WHILE . expr stmt_block

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 50
    func_call          go to state 44
    array_constructor  go to state 46


state 16

   36 stmt_for: FOR . alone_id IN expr stmt_block

    ID  shift, and go to state 23

    alone_id  go to state 51


state 17

   24 stmt_if: IF . expr opt_endl stmt_block elseif_list opt_endl
   25        | IF . expr opt_endl stmt_block elseif_list ELSE stmt_block opt_endl

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 52
    func_call          go to state 44
    array_constructor  go to state 46


state 18

   28 stmt_switch: SWITCH . expr opt_endl '{' opt_endl switch_cases opt_endl '}'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 53
    func_call          go to state 44
    array_constructor  go to state 46


state 19

   16 stmt: BREAK . end_expr

    ENDL  shift, and go to state 25
    ';'   shift, and go to state 26

    end_expr  go to state 54


state 20

   88 func_decl_named: FUNCTION . id_chain func_body

    ID  shift, and go to state 23

    alone_id  go to state 39
    id_chain  go to state 55


state 21

   17 stmt: RETURN . end_expr
   18     | RETURN . expr end_expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    ENDL    shift, and go to state 25
    ';'     shift, and go to state 26
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    end_expr           go to state 56
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 57
    func_call          go to state 44
    array_constructor  go to state 46


state 22

   55 expr: NIL .

    $default  reduce using rule 55 (expr)


state 23

   38 alone_id: ID .

    $default  reduce using rule 38 (alone_id)


state 24

   56 expr: NOT . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 58
    func_call          go to state 44
    array_constructor  go to state 46


state 25

    1 end_expr: ENDL .

    $default  reduce using rule 1 (end_expr)


state 26

    2 end_expr: ';' . opt_endl

    ENDL  shift, and go to state 59

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 60


state 27

    7 stmt_block: '{' . stmt_list '}' opt_endl

    $default  reduce using rule 8 (stmt_list)

    stmt_list  go to state 61


state 28

   73 expr: '[' . varubleType ']' '(' ')'
   96 array_constructor: '[' . array_elem_list ']'

    INT         shift, and go to state 5
    FLOAT       shift, and go to state 6
    DOUBLE      shift, and go to state 7
    BOOL        shift, and go to state 8
    STRING      shift, and go to state 9
    STRINGT     shift, and go to state 62
    CHARACTERT  shift, and go to state 63
    INTT        shift, and go to state 64
    FLOATT      shift, and go to state 65
    DOUBLET     shift, and go to state 66
    BOOLT       shift, and go to state 67
    TRUE        shift, and go to state 10
    FALSE       shift, and go to state 11
    LET         shift, and go to state 12
    VAR         shift, and go to state 13
    NIL         shift, and go to state 22
    ID          shift, and go to state 23
    NOT         shift, and go to state 24
    '['         shift, and go to state 28
    '('         shift, and go to state 29

    $default  reduce using rule 97 (array_elem_list)

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 68
    func_call          go to state 44
    varubleType        go to state 69
    array_constructor  go to state 46
    array_elem_list    go to state 70
    array_elems        go to state 71
    array_elem         go to state 72


state 29

   72 expr: '(' . expr ')'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 73
    func_call          go to state 44
    array_constructor  go to state 46


state 30

   22 stmt: end_expr .

    $default  reduce using rule 22 (stmt)


state 31

   23 stmt: stmt_import .

    $default  reduce using rule 23 (stmt)


state 32

   10 stmt: stmt_block .

    $default  reduce using rule 10 (stmt)


state 33

    9 stmt_list: stmt_list stmt . opt_endl

    ENDL  shift, and go to state 59

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 74


state 34

   11 stmt: stmt_if .

    $default  reduce using rule 11 (stmt)


state 35

   15 stmt: stmt_switch .

    $default  reduce using rule 15 (stmt)


state 36

   12 stmt: stmt_while .

    $default  reduce using rule 12 (stmt)


state 37

   13 stmt: stmt_for .

    $default  reduce using rule 13 (stmt)


state 38

   14 stmt: stmt_repeat .

    $default  reduce using rule 14 (stmt)


state 39

   39 id_chain: alone_id .

    $default  reduce using rule 39 (id_chain)


state 40

   40 id_chain: id_chain . '.' alone_id
   43 var: id_chain .

    '.'  shift, and go to state 75

    $default  reduce using rule 43 (var)


state 41

   44 var: varlet . id_chain
   45    | varlet . id_chain ':' '[' varubleType ']'
   46    | varlet . id_chain ':' varubleType

    ID  shift, and go to state 23

    alone_id  go to state 39
    id_chain  go to state 76


state 42

   20 stmt: var . '=' expr end_expr
   47 expr: var .
   76 func_call: var . '(' arg_list ')'

    '='  shift, and go to state 77
    '('  shift, and go to state 78

    $default  reduce using rule 47 (expr)


state 43

   19 stmt: expr . end_expr
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    ENDL   shift, and go to state 25
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93
    ';'    shift, and go to state 26

    end_expr  go to state 94


state 44

   74 expr: func_call .

    $default  reduce using rule 74 (expr)


state 45

   21 stmt: func_decl_named .

    $default  reduce using rule 21 (stmt)


state 46

   75 expr: array_constructor .

    $default  reduce using rule 75 (expr)


state 47

    6 stmt_import: IMPORT var .

    $default  reduce using rule 6 (stmt_import)


state 48

   37 stmt_repeat: REPEAT stmt_block . WHILE expr

    WHILE  shift, and go to state 95


state 49

   47 expr: var .
   76 func_call: var . '(' arg_list ')'

    '('  shift, and go to state 78

    '('       [reduce using rule 47 (expr)]
    $default  reduce using rule 47 (expr)


state 50

   35 stmt_while: WHILE expr . stmt_block
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93
    '{'    shift, and go to state 27

    stmt_block  go to state 96


state 51

   36 stmt_for: FOR alone_id . IN expr stmt_block

    IN  shift, and go to state 97


state 52

   24 stmt_if: IF expr . opt_endl stmt_block elseif_list opt_endl
   25        | IF expr . opt_endl stmt_block elseif_list ELSE stmt_block opt_endl
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    ENDL   shift, and go to state 59
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93

    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 98


state 53

   28 stmt_switch: SWITCH expr . opt_endl '{' opt_endl switch_cases opt_endl '}'
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    ENDL   shift, and go to state 59
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93

    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 99


state 54

   16 stmt: BREAK end_expr .

    $default  reduce using rule 16 (stmt)


state 55

   40 id_chain: id_chain . '.' alone_id
   88 func_decl_named: FUNCTION id_chain . func_body

    '.'  shift, and go to state 75
    '('  shift, and go to state 100

    func_body  go to state 101


state 56

   17 stmt: RETURN end_expr .

    $default  reduce using rule 17 (stmt)


state 57

   18 stmt: RETURN expr . end_expr
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    ENDL   shift, and go to state 25
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93
    ';'    shift, and go to state 26

    end_expr  go to state 102


state 58

   56 expr: NOT expr .
   57     | expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    $default  reduce using rule 56 (expr)


state 59

    4 opt_endl: ENDL .

    $default  reduce using rule 4 (opt_endl)


state 60

    2 end_expr: ';' opt_endl .

    $default  reduce using rule 2 (end_expr)


state 61

    7 stmt_block: '{' stmt_list . '}' opt_endl
    9 stmt_list: stmt_list . stmt opt_endl

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    ';'       shift, and go to state 26
    '{'       shift, and go to state 27
    '}'       shift, and go to state 103
    '['       shift, and go to state 28
    '('       shift, and go to state 29

    end_expr           go to state 30
    stmt_import        go to state 31
    stmt_block         go to state 32
    stmt               go to state 33
    stmt_if            go to state 34
    stmt_switch        go to state 35
    stmt_while         go to state 36
    stmt_for           go to state 37
    stmt_repeat        go to state 38
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 42
    expr               go to state 43
    func_call          go to state 44
    func_decl_named    go to state 45
    array_constructor  go to state 46


state 62

   83 varubleType: STRINGT .

    $default  reduce using rule 83 (varubleType)


state 63

   87 varubleType: CHARACTERT .

    $default  reduce using rule 87 (varubleType)


state 64

   82 varubleType: INTT .

    $default  reduce using rule 82 (varubleType)


state 65

   84 varubleType: FLOATT .

    $default  reduce using rule 84 (varubleType)


state 66

   85 varubleType: DOUBLET .

    $default  reduce using rule 85 (varubleType)


state 67

   86 varubleType: BOOLT .

    $default  reduce using rule 86 (varubleType)


state 68

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr
  101 array_elem: expr .

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93

    $default  reduce using rule 101 (array_elem)


state 69

   73 expr: '[' varubleType . ']' '(' ')'

    ']'  shift, and go to state 104


state 70

   96 array_constructor: '[' array_elem_list . ']'

    ']'  shift, and go to state 105


state 71

   98 array_elem_list: array_elems .
  100 array_elems: array_elems . ',' array_elem

    ','  shift, and go to state 106

    $default  reduce using rule 98 (array_elem_list)


state 72

   99 array_elems: array_elem .

    $default  reduce using rule 99 (array_elems)


state 73

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr
   72     | '(' expr . ')'

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93
    ')'    shift, and go to state 107


state 74

    9 stmt_list: stmt_list stmt opt_endl .

    $default  reduce using rule 9 (stmt_list)


state 75

   40 id_chain: id_chain '.' . alone_id

    ID  shift, and go to state 23

    alone_id  go to state 108


state 76

   40 id_chain: id_chain . '.' alone_id
   44 var: varlet id_chain .
   45    | varlet id_chain . ':' '[' varubleType ']'
   46    | varlet id_chain . ':' varubleType

    ':'  shift, and go to state 109
    '.'  shift, and go to state 75

    ':'       [reduce using rule 44 (var)]
    $default  reduce using rule 44 (var)


state 77

   20 stmt: var '=' . expr end_expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 110
    func_call          go to state 44
    array_constructor  go to state 46


state 78

   76 func_call: var '(' . arg_list ')'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    $default  reduce using rule 77 (arg_list)

    alone_id           go to state 39
    id_chain           go to state 111
    varlet             go to state 41
    var                go to state 49
    expr               go to state 112
    func_call          go to state 44
    arg_list           go to state 113
    args               go to state 114
    array_constructor  go to state 46


state 79

   71 expr: expr RANGE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 115
    func_call          go to state 44
    array_constructor  go to state 46


state 80

   69 expr: expr EQ . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 116
    func_call          go to state 44
    array_constructor  go to state 46


state 81

   70 expr: expr NE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 117
    func_call          go to state 44
    array_constructor  go to state 46


state 82

   68 expr: expr LE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 118
    func_call          go to state 44
    array_constructor  go to state 46


state 83

   67 expr: expr GE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 119
    func_call          go to state 44
    array_constructor  go to state 46


state 84

   57 expr: expr NOT .

    $default  reduce using rule 57 (expr)


state 85

   59 expr: expr OR . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 120
    func_call          go to state 44
    array_constructor  go to state 46


state 86

   58 expr: expr AND . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 121
    func_call          go to state 44
    array_constructor  go to state 46


state 87

   66 expr: expr '<' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 122
    func_call          go to state 44
    array_constructor  go to state 46


state 88

   65 expr: expr '>' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 123
    func_call          go to state 44
    array_constructor  go to state 46


state 89

   60 expr: expr '+' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 124
    func_call          go to state 44
    array_constructor  go to state 46


state 90

   61 expr: expr '-' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 125
    func_call          go to state 44
    array_constructor  go to state 46


state 91

   62 expr: expr '*' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 126
    func_call          go to state 44
    array_constructor  go to state 46


state 92

   63 expr: expr '/' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 127
    func_call          go to state 44
    array_constructor  go to state 46


state 93

   64 expr: expr '%' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 128
    func_call          go to state 44
    array_constructor  go to state 46


state 94

   19 stmt: expr end_expr .

    $default  reduce using rule 19 (stmt)


state 95

   37 stmt_repeat: REPEAT stmt_block WHILE . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 129
    func_call          go to state 44
    array_constructor  go to state 46


state 96

   35 stmt_while: WHILE expr stmt_block .

    $default  reduce using rule 35 (stmt_while)


state 97

   36 stmt_for: FOR alone_id IN . expr stmt_block

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 130
    func_call          go to state 44
    array_constructor  go to state 46


state 98

   24 stmt_if: IF expr opt_endl . stmt_block elseif_list opt_endl
   25        | IF expr opt_endl . stmt_block elseif_list ELSE stmt_block opt_endl

    '{'  shift, and go to state 27

    stmt_block  go to state 131


state 99

   28 stmt_switch: SWITCH expr opt_endl . '{' opt_endl switch_cases opt_endl '}'

    '{'  shift, and go to state 132


state 100

   89 func_body: '(' . arg_list_decl ')' FUNCTIONARROW varubleType stmt_block
   90          | '(' . arg_list_decl ')' stmt_block

    ID  shift, and go to state 23

    $default  reduce using rule 91 (arg_list_decl)

    alone_id       go to state 133
    arg_list_decl  go to state 134
    args_decl      go to state 135


state 101

   88 func_decl_named: FUNCTION id_chain func_body .

    $default  reduce using rule 88 (func_decl_named)


state 102

   18 stmt: RETURN expr end_expr .

    $default  reduce using rule 18 (stmt)


state 103

    7 stmt_block: '{' stmt_list '}' . opt_endl

    ENDL  shift, and go to state 59

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 136


state 104

   73 expr: '[' varubleType ']' . '(' ')'

    '('  shift, and go to state 137


state 105

   96 array_constructor: '[' array_elem_list ']' .

    $default  reduce using rule 96 (array_constructor)


state 106

  100 array_elems: array_elems ',' . array_elem

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 68
    func_call          go to state 44
    array_constructor  go to state 46
    array_elem         go to state 138


state 107

   72 expr: '(' expr ')' .

    $default  reduce using rule 72 (expr)


state 108

   40 id_chain: id_chain '.' alone_id .

    $default  reduce using rule 40 (id_chain)


state 109

   45 var: varlet id_chain ':' . '[' varubleType ']'
   46    | varlet id_chain ':' . varubleType

    STRINGT     shift, and go to state 62
    CHARACTERT  shift, and go to state 63
    INTT        shift, and go to state 64
    FLOATT      shift, and go to state 65
    DOUBLET     shift, and go to state 66
    BOOLT       shift, and go to state 67
    '['         shift, and go to state 139

    varubleType  go to state 140


state 110

   20 stmt: var '=' expr . end_expr
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    ENDL   shift, and go to state 25
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93
    ';'    shift, and go to state 26

    end_expr  go to state 141


state 111

   40 id_chain: id_chain . '.' alone_id
   43 var: id_chain .
   80 args: id_chain . ':' expr

    ':'  shift, and go to state 142
    '.'  shift, and go to state 75

    $default  reduce using rule 43 (var)


state 112

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr
   79 args: expr .

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93

    $default  reduce using rule 79 (args)


state 113

   76 func_call: var '(' arg_list . ')'

    ')'  shift, and go to state 143


state 114

   78 arg_list: args .
   81 args: args . ',' alone_id ':' expr

    ','  shift, and go to state 144

    $default  reduce using rule 78 (arg_list)


state 115

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr
   71     | expr RANGE expr .

    NOT  shift, and go to state 84
    '+'  shift, and go to state 89
    '-'  shift, and go to state 90
    '*'  shift, and go to state 91
    '/'  shift, and go to state 92
    '%'  shift, and go to state 93

    $default  reduce using rule 71 (expr)


state 116

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   69     | expr EQ expr .
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84
    '+'  shift, and go to state 89
    '-'  shift, and go to state 90
    '*'  shift, and go to state 91
    '/'  shift, and go to state 92
    '%'  shift, and go to state 93

    $default  reduce using rule 69 (expr)


state 117

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   70     | expr NE expr .
   71     | expr . RANGE expr

    NOT  shift, and go to state 84
    '+'  shift, and go to state 89
    '-'  shift, and go to state 90
    '*'  shift, and go to state 91
    '/'  shift, and go to state 92
    '%'  shift, and go to state 93

    $default  reduce using rule 70 (expr)


state 118

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   68     | expr LE expr .
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84
    '+'  shift, and go to state 89
    '-'  shift, and go to state 90
    '*'  shift, and go to state 91
    '/'  shift, and go to state 92
    '%'  shift, and go to state 93

    $default  reduce using rule 68 (expr)


state 119

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   67     | expr GE expr .
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84
    '+'  shift, and go to state 89
    '-'  shift, and go to state 90
    '*'  shift, and go to state 91
    '/'  shift, and go to state 92
    '%'  shift, and go to state 93

    $default  reduce using rule 67 (expr)


state 120

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   59     | expr OR expr .
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93

    $default  reduce using rule 59 (expr)


state 121

   57 expr: expr . NOT
   58     | expr . AND expr
   58     | expr AND expr .
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93

    $default  reduce using rule 58 (expr)


state 122

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   66     | expr '<' expr .
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84
    '+'  shift, and go to state 89
    '-'  shift, and go to state 90
    '*'  shift, and go to state 91
    '/'  shift, and go to state 92
    '%'  shift, and go to state 93

    $default  reduce using rule 66 (expr)


state 123

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   65     | expr '>' expr .
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84
    '+'  shift, and go to state 89
    '-'  shift, and go to state 90
    '*'  shift, and go to state 91
    '/'  shift, and go to state 92
    '%'  shift, and go to state 93

    $default  reduce using rule 65 (expr)


state 124

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   60     | expr '+' expr .
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84
    '*'  shift, and go to state 91
    '/'  shift, and go to state 92
    '%'  shift, and go to state 93

    $default  reduce using rule 60 (expr)


state 125

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   61     | expr '-' expr .
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84
    '*'  shift, and go to state 91
    '/'  shift, and go to state 92
    '%'  shift, and go to state 93

    $default  reduce using rule 61 (expr)


state 126

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   62     | expr '*' expr .
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84

    $default  reduce using rule 62 (expr)


state 127

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   63     | expr '/' expr .
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84

    $default  reduce using rule 63 (expr)


state 128

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   64     | expr '%' expr .
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    NOT  shift, and go to state 84

    $default  reduce using rule 64 (expr)


state 129

   37 stmt_repeat: REPEAT stmt_block WHILE expr .
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93

    NOT       [reduce using rule 37 (stmt_repeat)]
    $default  reduce using rule 37 (stmt_repeat)


state 130

   36 stmt_for: FOR alone_id IN expr . stmt_block
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93
    '{'    shift, and go to state 27

    stmt_block  go to state 145


state 131

   24 stmt_if: IF expr opt_endl stmt_block . elseif_list opt_endl
   25        | IF expr opt_endl stmt_block . elseif_list ELSE stmt_block opt_endl

    $default  reduce using rule 26 (elseif_list)

    elseif_list  go to state 146


state 132

   28 stmt_switch: SWITCH expr opt_endl '{' . opt_endl switch_cases opt_endl '}'

    ENDL  shift, and go to state 59

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 147


state 133

   94 args_decl: alone_id . ':' varubleType

    ':'  shift, and go to state 148


state 134

   89 func_body: '(' arg_list_decl . ')' FUNCTIONARROW varubleType stmt_block
   90          | '(' arg_list_decl . ')' stmt_block

    ')'  shift, and go to state 149


state 135

   93 arg_list_decl: args_decl . @1
   95 args_decl: args_decl . ',' alone_id ':' varubleType

    ','  shift, and go to state 150

    $default  reduce using rule 92 (@1)

    @1  go to state 151


state 136

    7 stmt_block: '{' stmt_list '}' opt_endl .

    $default  reduce using rule 7 (stmt_block)


state 137

   73 expr: '[' varubleType ']' '(' . ')'

    ')'  shift, and go to state 152


state 138

  100 array_elems: array_elems ',' array_elem .

    $default  reduce using rule 100 (array_elems)


state 139

   45 var: varlet id_chain ':' '[' . varubleType ']'

    STRINGT     shift, and go to state 62
    CHARACTERT  shift, and go to state 63
    INTT        shift, and go to state 64
    FLOATT      shift, and go to state 65
    DOUBLET     shift, and go to state 66
    BOOLT       shift, and go to state 67

    varubleType  go to state 153


state 140

   46 var: varlet id_chain ':' varubleType .

    $default  reduce using rule 46 (var)


state 141

   20 stmt: var '=' expr end_expr .

    $default  reduce using rule 20 (stmt)


state 142

   80 args: id_chain ':' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 154
    func_call          go to state 44
    array_constructor  go to state 46


state 143

   76 func_call: var '(' arg_list ')' .

    $default  reduce using rule 76 (func_call)


state 144

   81 args: args ',' . alone_id ':' expr

    ID  shift, and go to state 23

    alone_id  go to state 155


state 145

   36 stmt_for: FOR alone_id IN expr stmt_block .

    $default  reduce using rule 36 (stmt_for)


state 146

   24 stmt_if: IF expr opt_endl stmt_block elseif_list . opt_endl
   25        | IF expr opt_endl stmt_block elseif_list . ELSE stmt_block opt_endl
   27 elseif_list: elseif_list . ELSEIF expr stmt_block

    ELSE    shift, and go to state 156
    ELSEIF  shift, and go to state 157
    ENDL    shift, and go to state 59

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 158


state 147

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl . switch_cases opt_endl '}'

    $default  reduce using rule 29 (switch_cases)

    switch_cases  go to state 159


state 148

   94 args_decl: alone_id ':' . varubleType

    STRINGT     shift, and go to state 62
    CHARACTERT  shift, and go to state 63
    INTT        shift, and go to state 64
    FLOATT      shift, and go to state 65
    DOUBLET     shift, and go to state 66
    BOOLT       shift, and go to state 67

    varubleType  go to state 160


state 149

   89 func_body: '(' arg_list_decl ')' . FUNCTIONARROW varubleType stmt_block
   90          | '(' arg_list_decl ')' . stmt_block

    FUNCTIONARROW  shift, and go to state 161
    '{'            shift, and go to state 27

    stmt_block  go to state 162


state 150

   95 args_decl: args_decl ',' . alone_id ':' varubleType

    ID  shift, and go to state 23

    alone_id  go to state 163


state 151

   93 arg_list_decl: args_decl @1 .

    $default  reduce using rule 93 (arg_list_decl)


state 152

   73 expr: '[' varubleType ']' '(' ')' .

    $default  reduce using rule 73 (expr)


state 153

   45 var: varlet id_chain ':' '[' varubleType . ']'

    ']'  shift, and go to state 164


state 154

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr
   80 args: id_chain ':' expr .

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93

    $default  reduce using rule 80 (args)


state 155

   81 args: args ',' alone_id . ':' expr

    ':'  shift, and go to state 165


state 156

   25 stmt_if: IF expr opt_endl stmt_block elseif_list ELSE . stmt_block opt_endl

    '{'  shift, and go to state 27

    stmt_block  go to state 166


state 157

   27 elseif_list: elseif_list ELSEIF . expr stmt_block

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 167
    func_call          go to state 44
    array_constructor  go to state 46


state 158

   24 stmt_if: IF expr opt_endl stmt_block elseif_list opt_endl .

    $default  reduce using rule 24 (stmt_if)


state 159

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases . opt_endl '}'
   30 switch_cases: switch_cases . switch_case

    CASE     shift, and go to state 168
    DEFAULT  shift, and go to state 169
    ENDL     shift, and go to state 59

    $default  reduce using rule 3 (opt_endl)

    opt_endl       go to state 170
    switch_case    go to state 171
    case_label     go to state 172
    default_label  go to state 173


state 160

   94 args_decl: alone_id ':' varubleType .

    $default  reduce using rule 94 (args_decl)


state 161

   89 func_body: '(' arg_list_decl ')' FUNCTIONARROW . varubleType stmt_block

    STRINGT     shift, and go to state 62
    CHARACTERT  shift, and go to state 63
    INTT        shift, and go to state 64
    FLOATT      shift, and go to state 65
    DOUBLET     shift, and go to state 66
    BOOLT       shift, and go to state 67

    varubleType  go to state 174


state 162

   90 func_body: '(' arg_list_decl ')' stmt_block .

    $default  reduce using rule 90 (func_body)


state 163

   95 args_decl: args_decl ',' alone_id . ':' varubleType

    ':'  shift, and go to state 175


state 164

   45 var: varlet id_chain ':' '[' varubleType ']' .

    $default  reduce using rule 45 (var)


state 165

   81 args: args ',' alone_id ':' . expr

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 176
    func_call          go to state 44
    array_constructor  go to state 46


state 166

   25 stmt_if: IF expr opt_endl stmt_block elseif_list ELSE stmt_block . opt_endl

    ENDL  shift, and go to state 59

    ENDL      [reduce using rule 3 (opt_endl)]
    $default  reduce using rule 3 (opt_endl)

    opt_endl  go to state 177


state 167

   27 elseif_list: elseif_list ELSEIF expr . stmt_block
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93
    '{'    shift, and go to state 27

    stmt_block  go to state 178


state 168

   33 case_label: CASE . expr ':'

    INT     shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    BOOL    shift, and go to state 8
    STRING  shift, and go to state 9
    TRUE    shift, and go to state 10
    FALSE   shift, and go to state 11
    LET     shift, and go to state 12
    VAR     shift, and go to state 13
    NIL     shift, and go to state 22
    ID      shift, and go to state 23
    NOT     shift, and go to state 24
    '['     shift, and go to state 28
    '('     shift, and go to state 29

    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 49
    expr               go to state 179
    func_call          go to state 44
    array_constructor  go to state 46


state 169

   34 default_label: DEFAULT . ':'

    ':'  shift, and go to state 180


state 170

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases opt_endl . '}'

    '}'  shift, and go to state 181


state 171

   30 switch_cases: switch_cases switch_case .

    $default  reduce using rule 30 (switch_cases)


state 172

   31 switch_case: case_label . stmt_list

    $default  reduce using rule 8 (stmt_list)

    stmt_list  go to state 182


state 173

   32 switch_case: default_label . stmt_list

    $default  reduce using rule 8 (stmt_list)

    stmt_list  go to state 183


state 174

   89 func_body: '(' arg_list_decl ')' FUNCTIONARROW varubleType . stmt_block

    '{'  shift, and go to state 27

    stmt_block  go to state 184


state 175

   95 args_decl: args_decl ',' alone_id ':' . varubleType

    STRINGT     shift, and go to state 62
    CHARACTERT  shift, and go to state 63
    INTT        shift, and go to state 64
    FLOATT      shift, and go to state 65
    DOUBLET     shift, and go to state 66
    BOOLT       shift, and go to state 67

    varubleType  go to state 185


state 176

   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr
   81 args: args ',' alone_id ':' expr .

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93

    $default  reduce using rule 81 (args)


state 177

   25 stmt_if: IF expr opt_endl stmt_block elseif_list ELSE stmt_block opt_endl .

    $default  reduce using rule 25 (stmt_if)


state 178

   27 elseif_list: elseif_list ELSEIF expr stmt_block .

    $default  reduce using rule 27 (elseif_list)


state 179

   33 case_label: CASE expr . ':'
   57 expr: expr . NOT
   58     | expr . AND expr
   59     | expr . OR expr
   60     | expr . '+' expr
   61     | expr . '-' expr
   62     | expr . '*' expr
   63     | expr . '/' expr
   64     | expr . '%' expr
   65     | expr . '>' expr
   66     | expr . '<' expr
   67     | expr . GE expr
   68     | expr . LE expr
   69     | expr . EQ expr
   70     | expr . NE expr
   71     | expr . RANGE expr

    RANGE  shift, and go to state 79
    EQ     shift, and go to state 80
    NE     shift, and go to state 81
    LE     shift, and go to state 82
    GE     shift, and go to state 83
    NOT    shift, and go to state 84
    OR     shift, and go to state 85
    AND    shift, and go to state 86
    '<'    shift, and go to state 87
    '>'    shift, and go to state 88
    '+'    shift, and go to state 89
    '-'    shift, and go to state 90
    '*'    shift, and go to state 91
    '/'    shift, and go to state 92
    '%'    shift, and go to state 93
    ':'    shift, and go to state 186


state 180

   34 default_label: DEFAULT ':' .

    $default  reduce using rule 34 (default_label)


state 181

   28 stmt_switch: SWITCH expr opt_endl '{' opt_endl switch_cases opt_endl '}' .

    $default  reduce using rule 28 (stmt_switch)


state 182

    9 stmt_list: stmt_list . stmt opt_endl
   31 switch_case: case_label stmt_list .

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    ';'       shift, and go to state 26
    '{'       shift, and go to state 27
    '['       shift, and go to state 28
    '('       shift, and go to state 29

    ENDL      [reduce using rule 31 (switch_case)]
    $default  reduce using rule 31 (switch_case)

    end_expr           go to state 30
    stmt_import        go to state 31
    stmt_block         go to state 32
    stmt               go to state 33
    stmt_if            go to state 34
    stmt_switch        go to state 35
    stmt_while         go to state 36
    stmt_for           go to state 37
    stmt_repeat        go to state 38
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 42
    expr               go to state 43
    func_call          go to state 44
    func_decl_named    go to state 45
    array_constructor  go to state 46


state 183

    9 stmt_list: stmt_list . stmt opt_endl
   32 switch_case: default_label stmt_list .

    IMPORT    shift, and go to state 4
    INT       shift, and go to state 5
    FLOAT     shift, and go to state 6
    DOUBLE    shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    TRUE      shift, and go to state 10
    FALSE     shift, and go to state 11
    LET       shift, and go to state 12
    VAR       shift, and go to state 13
    REPEAT    shift, and go to state 14
    WHILE     shift, and go to state 15
    FOR       shift, and go to state 16
    IF        shift, and go to state 17
    SWITCH    shift, and go to state 18
    BREAK     shift, and go to state 19
    FUNCTION  shift, and go to state 20
    RETURN    shift, and go to state 21
    NIL       shift, and go to state 22
    ID        shift, and go to state 23
    NOT       shift, and go to state 24
    ENDL      shift, and go to state 25
    ';'       shift, and go to state 26
    '{'       shift, and go to state 27
    '['       shift, and go to state 28
    '('       shift, and go to state 29

    ENDL      [reduce using rule 32 (switch_case)]
    $default  reduce using rule 32 (switch_case)

    end_expr           go to state 30
    stmt_import        go to state 31
    stmt_block         go to state 32
    stmt               go to state 33
    stmt_if            go to state 34
    stmt_switch        go to state 35
    stmt_while         go to state 36
    stmt_for           go to state 37
    stmt_repeat        go to state 38
    alone_id           go to state 39
    id_chain           go to state 40
    varlet             go to state 41
    var                go to state 42
    expr               go to state 43
    func_call          go to state 44
    func_decl_named    go to state 45
    array_constructor  go to state 46


state 184

   89 func_body: '(' arg_list_decl ')' FUNCTIONARROW varubleType stmt_block .

    $default  reduce using rule 89 (func_body)


state 185

   95 args_decl: args_decl ',' alone_id ':' varubleType .

    $default  reduce using rule 95 (args_decl)


state 186

   33 case_label: CASE expr ':' .

    $default  reduce using rule 33 (case_label)
